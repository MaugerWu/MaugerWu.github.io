<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mauger`s Blog</title>
  
  <subtitle>越努力，越幸运！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wumaozheng.com/"/>
  <updated>2018-10-15T19:13:38.189Z</updated>
  <id>https://wumaozheng.com/</id>
  
  <author>
    <name>Mauger</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Winsows&amp;Word常用快捷键</title>
    <link href="https://wumaozheng.com/2018/windows-word-commands.html"/>
    <id>https://wumaozheng.com/2018/windows-word-commands.html</id>
    <published>2018-09-28T15:08:00.000Z</published>
    <updated>2018-10-15T19:13:38.189Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.wumaozheng.com/blog/article/shortcut-key.jpg" alt="" title="Windows"></p><p>&emsp;&emsp;快捷键（shortcut keys），又叫快速键或热键，指通过某些特定的按键、按键顺序或按键组合来完成一个操作，很多快捷键往往与如 Ctrl 键、Shift 键、Alt 键、Fn 键以及 Windows 平台下的 Windows 键等配合使用。利用快捷键可以代替鼠标做一些工作，可以利用键盘快捷键打开、关闭和导航“开始”菜单、桌面、菜单、对话框以及网页，Word里面也可以用到快捷键。</p><a id="more"></a><h3 id="一、Windows中常用快捷键"><a href="#一、Windows中常用快捷键" class="headerlink" title="一、Windows中常用快捷键"></a>一、Windows中常用快捷键</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`F1`</span>：显示 Windows 的帮助内容</span><br><span class="line"><span class="string">`F2`</span>：文件重命名</span><br><span class="line"><span class="string">`F5`</span>：刷新</span><br><span class="line"><span class="string">`Ctrl + F5`</span>：浏览器中强制刷新页面</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`Win`</span>：显示开始菜单</span><br><span class="line"><span class="string">`Win + A`</span>：打开操作中心</span><br><span class="line"><span class="string">`Win + B`</span>：选中桌面右下方工具栏</span><br><span class="line"><span class="string">`Win + E`</span>：打开文件管理器</span><br><span class="line"><span class="string">`Win + D`</span>：显示桌面</span><br><span class="line"><span class="string">`Win + L`</span>：锁定计算机</span><br><span class="line"><span class="string">`Win + I`</span>：打开设置</span><br><span class="line"><span class="string">`Win + M`</span>：最小化所有窗口</span><br><span class="line"><span class="string">`Win + R`</span>：打开运行命令行</span><br><span class="line"><span class="string">`Win + Tab`</span>：切换已打开的应用</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`Alt + F4`</span>：用来关闭当前窗口；如所有窗口已关闭或最小化，则为关机快捷键，使用后会弹出一关机对话框。</span><br><span class="line"><span class="string">`Alt + Tab`</span>：在打开的应用之间进行切换</span><br><span class="line"><span class="string">`Alt + ←`</span>：资源管理器中，查看上一级文件夹；浏览器中，返回至上一次访问的历史记录页面</span><br><span class="line"><span class="string">`Alt + →`</span>：资源管理器中，查看下一级文件夹；浏览器中，跳转至下一次访问的历史记录页面</span><br><span class="line"><span class="string">`Alt + 空格`</span>：打开快捷方式菜单</span><br><span class="line"><span class="string">`Alt + D`</span>：选择地址栏</span><br><span class="line"><span class="string">`Alt + P`</span>：显示预览窗格</span><br><span class="line"><span class="string">`Alt+Enter`</span>：打开所选项目的“属性”对话框</span><br><span class="line"><span class="string">`PrtSc`</span>：屏幕截图</span><br></pre></td></tr></table></figure><h3 id="二、Word常用快捷键"><a href="#二、Word常用快捷键" class="headerlink" title="二、Word常用快捷键"></a>二、Word常用快捷键</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`Ctrl + A`</span>：全选</span><br><span class="line"><span class="string">`Ctrl + B`</span>：加粗</span><br><span class="line"><span class="string">`Ctrl + C`</span>：复制</span><br><span class="line"><span class="string">`Ctrl + D`</span>：打开字体设置窗口；浏览器中添加书签</span><br><span class="line"><span class="string">`Ctrl + E`</span>：文档居中显示</span><br><span class="line"><span class="string">`Ctrl + F`</span>：查找</span><br><span class="line"><span class="string">`Ctrl + G`</span>：打开对话框定位到第几页（F5相同）</span><br><span class="line"><span class="string">`Ctrl + H`</span>：查找和替换</span><br><span class="line"><span class="string">`Ctrl + I`</span>：套用或移除斜体格式</span><br><span class="line"><span class="string">`Ctrl + J`</span>：Word 中段落使用或取消两端对齐</span><br><span class="line"><span class="string">`Ctrl + K`</span>：插入超链接</span><br><span class="line"><span class="string">`Ctrl + L`</span>：文档居左显示</span><br><span class="line"><span class="string">`Ctrl + M`</span>：同时增加首行和悬挂缩进</span><br><span class="line"><span class="string">`Ctrl + N`</span>：创建新的空白文档</span><br><span class="line"><span class="string">`Ctrl + O`</span>：打开文档窗口</span><br><span class="line"><span class="string">`Ctrl + P`</span>：打印文档</span><br><span class="line"><span class="string">`Ctrl + Q`</span>：清除选择文本的字体格式</span><br><span class="line"><span class="string">`Ctrl + R`</span>：文档居右显示</span><br><span class="line"><span class="string">`Ctrl + S`</span>：保存</span><br><span class="line"><span class="string">`Ctrl + T`</span>：增加首行缩进</span><br><span class="line"><span class="string">`Ctrl + U`</span>：套用或移除下划线</span><br><span class="line"><span class="string">`Ctrl + V`</span>：粘贴</span><br><span class="line"><span class="string">`Ctrl + W`</span>：关闭 Word 程序</span><br><span class="line"><span class="string">`Ctrl + X`</span>：剪切</span><br><span class="line"><span class="string">`Ctrl + Y`</span>：恢复上一步操作或指令（撤销之后的恢复）</span><br><span class="line"><span class="string">`Ctrl + Z`</span>：撤销</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`Ctrl + 0`</span>：将选中的文本每段前增加<span class="string">`12磅的间距`</span>。</span><br><span class="line"><span class="string">`Ctrl + 1`</span>：若选中的文本行距不是<span class="string">`单倍行距`</span>，则将其快速设置为<span class="string">`单倍行距`</span>。</span><br><span class="line"><span class="string">`Ctrl + 2`</span>：将选中的文本行距设置为<span class="string">`两倍行距`</span>。</span><br><span class="line"><span class="string">`Ctrl + 5`</span>：将选中的文本行距设置为<span class="string">`1.5倍行距`</span>。</span><br><span class="line"><span class="string">`Ctrl + F2`</span>：快速执行<span class="string">`打印预览`</span>功能。</span><br><span class="line"><span class="string">`Ctrl + F4`</span>：关闭当前文档，并提示是否保存。</span><br><span class="line"><span class="string">`Ctrl + F5`</span>：使窗口还原到最大化之前的状态。</span><br><span class="line"><span class="string">`Ctrl + Shift + F5`</span>：打开<span class="string">`书签`</span>对话框。</span><br><span class="line"><span class="string">`Ctrl + Shift + F8`</span>：激活列选择功能，即通常所说的选择竖块文本（再按一次或按<span class="string">`Esc`</span>键，取消该功能）。</span><br><span class="line"><span class="string">`Ctrl + F9`</span>：在光标处插入一域记号<span class="string">`&#123;&#125;`</span>（注意：直接输入的一对大括号不能作为域记号）。</span><br><span class="line"><span class="string">`Ctrl + Shift + Esc`</span>：打开任务管理器</span><br><span class="line"><span class="string">`Ctrl + [`</span>：缩小字体</span><br><span class="line"><span class="string">`Ctrl + ]`</span>：放大字体</span><br><span class="line"><span class="string">`Shift + F3`</span>：设置英文字母大小写切换（包含首字母大写）</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://image.wumaozheng.com/blog/article/shortcut-key.jpg&quot; alt=&quot;&quot; title=&quot;Windows&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;快捷键（shortcut keys），又叫快速键或热键，指通过某些特定的按键、按键顺序或按键组合来完成一个操作，很多快捷键往往与如 Ctrl 键、Shift 键、Alt 键、Fn 键以及 Windows 平台下的 Windows 键等配合使用。利用快捷键可以代替鼠标做一些工作，可以利用键盘快捷键打开、关闭和导航“开始”菜单、桌面、菜单、对话框以及网页，Word里面也可以用到快捷键。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Windows" scheme="https://wumaozheng.com/tags/Windows/"/>
    
      <category term="Word" scheme="https://wumaozheng.com/tags/Word/"/>
    
      <category term="快捷键" scheme="https://wumaozheng.com/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE 规范</title>
    <link href="https://wumaozheng.com/2018/JavaEE-Specification.html"/>
    <id>https://wumaozheng.com/2018/JavaEE-Specification.html</id>
    <published>2018-07-24T15:01:05.000Z</published>
    <updated>2018-09-18T12:23:25.249Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.wumaozheng.com/blog/article/JavaEE.jpg" alt="Java EE"></p><h3 id="什么是-JavaEE？"><a href="#什么是-JavaEE？" class="headerlink" title="什么是 JavaEE？"></a>什么是 JavaEE？</h3><p>&emsp;&emsp;在企业级应用中，都有一些通用企业需求模块，如：数据库连接、邮件服务、事务处理等。既然很多企业级应用都需要这些模块，一些大公司便开发了自己的通用模块服务，即中间件。这样一来，就避免了重复开发，开发周期长和代码可靠性差等问题。但是，各公司的中间件不兼容的问题就出现了，用户无法将它们组装在一起为自己服务。于是，“标准”就应运而生了。</p><p>&emsp;&emsp;JavaEE 就是基于 Java 技术的一系列标准。</p><p>&emsp;&emsp;JavaEE 是 Java 平台企业版（Java Platform Enterprise Edition），核心是一组技术规范与指南，其中所包含的各类组件，服务架构和技术层次，都有共同的标准及规格，让各种依云 JavaEE 架构的不同平台之间，存在良好的兼容性。</p><a id="more"></a><h3 id="JavaEE-的13种规范"><a href="#JavaEE-的13种规范" class="headerlink" title="JavaEE 的13种规范"></a>JavaEE 的13种规范</h3><h4 id="1-JDBC（Java-Database-Connectivity）"><a href="#1-JDBC（Java-Database-Connectivity）" class="headerlink" title="1. JDBC（Java Database Connectivity）"></a>1. JDBC（Java Database Connectivity）</h4><p>&emsp;&emsp;JDBC 是以统一方式访问数据库的 API。</p><p>&emsp;&emsp;它提供了独立于平台的数据库访问，也就是说，有了 JDBC API，我们就不必为访问 Oracle 数据库专门写一个程序，为访问 Sybase 数据库又专门写一个程序等等，只需要用 JDBC API 写一个程序就够了，它可以向相应数据库发送 SQL 调用 。JDBC 是 Java 应用程序与各种不同数据库之间进行对话的方法的机制。简单地说，它做了三件事：</p><ul><li>与数据库建立连接</li><li>发送操作数据库的语句</li><li>返回处理结果</li></ul><h4 id="2-JNDI（Java-Name-and-Directory-Interface）"><a href="#2-JNDI（Java-Name-and-Directory-Interface）" class="headerlink" title="2. JNDI（Java Name and Directory Interface）"></a>2. JNDI（Java Name and Directory Interface）</h4><p>&emsp;&emsp;JNDI 是一组在 Java 应用中访问命名和目录服务的 API。</p><p>&emsp;&emsp;（命名服务将名称和对象联系起来，我们即可用名称访问对象。JNDI 允许把名称同 Java 对象或资源关联起来，建立逻辑关联，而不必知道对象或资源的物理 ID。） JNDI 为开发人员提供了查找和访问各种命名和目录服务的通用，统一的接口，可访问的目录及服务如下表：</p><p>&emsp;&emsp;利用 JNDI 的命名与服务功能可满足企业级 API 对命名与服务的访问，诸如 EJB、JMS、JDBC 2.0 以及 IIOP 上的 RMI 通过 JNDI 来使用 CORBA 的命名服务。</p><p>&emsp;&emsp;JNDI 和 JDBC 类似，都是构建在抽象层上。因为它提供了标准的独立于命名系统的 API，这些 API 构建在命名系统之上。这一层有助于将应用与实际数据源分离，因此不管是访问的 LDAP，RMI 还是 DNS。也就是说，JNDI 独立于目录服务的具体实现，只要有目录的服务提供接口或驱动，就可以使用目录。</p><h4 id="3-EJB（Enterprise-JavaBean）"><a href="#3-EJB（Enterprise-JavaBean）" class="headerlink" title="3. EJB（Enterprise JavaBean）"></a>3. EJB（Enterprise JavaBean）</h4><p>&emsp;&emsp;J2EE 将业务逻辑从客户端软件中抽取出来，封装在一个组件中。这个组件运行在一个独立的服务器上，客户端软件通过网络调用组件提供的服务以实现业务逻辑，而客户端软件的功能只是负责发送调用请求和显示处理结果。</p><p>&emsp;&emsp;在 J2EE中，这个运行在一个独立的服务器上，并封装了业务逻辑的组件就是 EJB 组件。其实就是把原来放到客户端实现的代码放到服务器端，并依靠RMI进行通信。</p><h4 id="4-RMI（Remote-MethodInvoke）"><a href="#4-RMI（Remote-MethodInvoke）" class="headerlink" title="4. RMI（Remote MethodInvoke）"></a>4. RMI（Remote MethodInvoke）</h4><p>&emsp;&emsp;RMI 是一组用户开发分布式应用程序的 API。</p><p>&emsp;&emsp;这一协议调用远程对象上的方法使用了序列化的方式在客户端和服务器之间传递数据，使得原先的程序在同一操作系统的方法调用，变成了不同操作系统之间程序的方法调用，即 RMI 机制实现了程序组件在不同操作系统之间的通信。它是一种被 EJB 使用的更底层的协议。</p><p>&emsp;&emsp;RMI / JNI：RMI 可利用标准 Java 本机方法接口与现有的和原有的系统相连接。</p><p>&emsp;&emsp;RMI / JDBC：RMI 利用标准 JDBC 包与现有的关系数据库连接。</p><p>&emsp;&emsp;这就实现了与非 Java 语言的现有服务器进行通信。</p><h4 id="5-Java-IDL-CORBA（Common-Object-Request-Broker-Architecture）"><a href="#5-Java-IDL-CORBA（Common-Object-Request-Broker-Architecture）" class="headerlink" title="5. Java IDL / CORBA（Common Object Request Broker Architecture）"></a>5. Java IDL / CORBA（Common Object Request Broker Architecture）</h4><p>&emsp;&emsp;Java 接口定义语言 / 公用对象请求代理程序体系结构。</p><p>&emsp;&emsp;在 Java IDL 的支持下，开发人员可以将 Java 和 CORBA 集成在一起。他们可以创建 Java 对象并使之可在 CORBA ORB 中展开，或者他们还可以创建 Java 类并作为和其它 ORB 一起展开的 CORBA 对象的客户。后一种方法提供了另外一种途径，通过它 Java 可以被用于将新的应用和旧的系统相集成。</p><p>&emsp;&emsp;CORBA 是面向对象标准的第一步，有了这个标准，软件的实现与工作环境对用户和开发者不再重要，可以把精力更多地放在本地系统的实现与优化上。</p><h4 id="6-JSP（Java-Server-Pages）"><a href="#6-JSP（Java-Server-Pages）" class="headerlink" title="6. JSP（Java Server Pages）"></a>6. JSP（Java Server Pages）</h4><p>&emsp;&emsp;JSP 页面由 HTML 代码和嵌入其中的 Java 新代码所组成，其根本是一个简化的 Servlet 设计。</p><p>&emsp;&emsp;服务器在页面被客户端请求后，对这些 Java 代码进行处理，然后将执行结果连同原 HTML 代码生成的新 HTML 页面返回给客户端浏览器。</p><h4 id="7-Java-Servlet"><a href="#7-Java-Servlet" class="headerlink" title="7. Java Servlet"></a>7. Java Servlet</h4><p>&emsp;&emsp;Servlet 是一种小型的 Java 程序，扩展了 Web 服务器的功能，作为一种服务器的应用，当被请求时开始执行。Servlet 提供的功能大多和 JSP 类似，不过，JSP 通常是大多数的 HTML 代码中嵌入少量的 Java 代码，而 Servlet 全部由Java写成并生成 HTML。</p><h4 id="8-XML（Extensible-Markup-Language）"><a href="#8-XML（Extensible-Markup-Language）" class="headerlink" title="8. XML（Extensible Markup Language）"></a>8. XML（Extensible Markup Language）</h4><p>&emsp;&emsp;XML 可扩展标记语言，被用来传输和存储数据。XML 的发展和 Java 是相互独立的。不过，它和 Java 具有的相同目标就是跨平台。通过将 Java 与 XML 结合，我们可以得到一个完全与平台无关的解决方案。</p><h4 id="9-JMS（Java-Message-Service）"><a href="#9-JMS（Java-Message-Service）" class="headerlink" title="9. JMS（Java Message Service）"></a>9. JMS（Java Message Service）</h4><p>&emsp;&emsp;它是一种与厂商无关的 API，用来访问消息收发系统消息。它类似于 JDBC。JDBC 是可以用来访问不同关系数据库的 API，而 JMS 则提供同样与厂商无关的访问消息收发服务的方法，这样就可以通过消息收发服务实现从一个 JMS 客户机向另一个 JMS 客户机发送消息，所需要的是厂商支持 JMS。换句话说，JMS 是 Java 平台上有关面向消息中间件的技术规范。</p><h4 id="10-JTA（Java-Transaction-API）"><a href="#10-JTA（Java-Transaction-API）" class="headerlink" title="10. JTA（Java Transaction API）"></a>10. JTA（Java Transaction API）</h4><p>&emsp;&emsp;定义了一种标准 API，应用程序由此可以访问各种事务监控。它允许应用程序执行分布式事务处理，在两个或多个网络计算机资源上访问并且更新数据。JTA和JTS为J2EE 平台提供了分布式事务服务。</p><p>&emsp;&emsp;JTA 事务比 JDBC 事务更强大，一个 JTA 事务可以有多个参与者，而一个 JDBC 事务则被限定在一个单一的数据库连接。</p><h4 id="11-JTS（Java-Transaction-Service）"><a href="#11-JTS（Java-Transaction-Service）" class="headerlink" title="11. JTS（Java Transaction Service）"></a>11. JTS（Java Transaction Service）</h4><p>&emsp;&emsp;JTS 是 CORBA OTS 事务监控器的一个基本实现。JTS 指定了一个事务管理器的实现（Transaction Manager），这个管理器在一个高级别上支持 JTA 规范，并且在一个低级别上实现了 OMG OTS 规范的 Java 映射。一个 JTS 事务管理器为应用服务器、资源管理器、standalone 应用和通信资源管理器提供事务服务。</p><h4 id="12-JavaMail"><a href="#12-JavaMail" class="headerlink" title="12. JavaMail"></a>12. JavaMail</h4><p>&emsp;&emsp;用于访问邮件服务器的 API，提供了一套邮件服务器的抽象类。</p><h4 id="13-JAF（JavaBeans-Activation-Framework）"><a href="#13-JAF（JavaBeans-Activation-Framework）" class="headerlink" title="13. JAF（JavaBeans Activation Framework）"></a>13. JAF（JavaBeans Activation Framework）</h4><p>&emsp;&emsp;JAF 是一个专用的数据处理框架，它用于封装数据，并为应用程序提供访问和操作数据的接口。也就是说，JAF 让 Java 程序知道怎么对一个数据源进行查看、编辑、打印等。</p><p>&emsp;&emsp;JavaMail 利用 JAF 来处理 MIME 编码的邮件附件。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://image.wumaozheng.com/blog/article/JavaEE.jpg&quot; alt=&quot;Java EE&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;什么是-JavaEE？&quot;&gt;&lt;a href=&quot;#什么是-JavaEE？&quot; class=&quot;headerlink&quot; title=&quot;什么是 JavaEE？&quot;&gt;&lt;/a&gt;什么是 JavaEE？&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在企业级应用中，都有一些通用企业需求模块，如：数据库连接、邮件服务、事务处理等。既然很多企业级应用都需要这些模块，一些大公司便开发了自己的通用模块服务，即中间件。这样一来，就避免了重复开发，开发周期长和代码可靠性差等问题。但是，各公司的中间件不兼容的问题就出现了，用户无法将它们组装在一起为自己服务。于是，“标准”就应运而生了。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;JavaEE 就是基于 Java 技术的一系列标准。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;JavaEE 是 Java 平台企业版（Java Platform Enterprise Edition），核心是一组技术规范与指南，其中所包含的各类组件，服务架构和技术层次，都有共同的标准及规格，让各种依云 JavaEE 架构的不同平台之间，存在良好的兼容性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaEE" scheme="https://wumaozheng.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>Legends Never Die</title>
    <link href="https://wumaozheng.com/2018/music-Legends-Never-Die.html"/>
    <id>https://wumaozheng.com/2018/music-Legends-Never-Die.html</id>
    <published>2018-06-22T15:08:25.000Z</published>
    <updated>2018-10-15T18:48:19.078Z</updated>
    
    <content type="html"><![CDATA[<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=540854940&auto=0&height=66"></iframe><br><a id="more"></a></p><div style="text-align: center"><br><p style="color: #8B0000;">歌手：Toxic Epic<br>作曲 : 英雄联盟/Toxic Wallen<br>作词 : 英雄联盟<br>所属专辑：英雄不朽</p><p style="color: #000000;">Legends never die<br>When the world is calling you<br>Can you hear them screaming out your name<br>Legends never die<br>They become a part of you<br>Every time you bleed for reaching greatness<br>Relentless you survive<br>They never lose hope when everything’s cold and the fighting’s near<br>It’s deep in their bones they’ll run into smoke when the fire is fierce<br>Oh pick yourself up ‘cause<br>Legends never die<br>Legends never die<br>Legends never die<br>They’re written down in eternity<br>But you’ll never see the price it costs the scars collected all their lives<br>When everything’s lost they pick up their hearts and avenge defeat<br>Before it all starts they suffer through harm just to touch a dream<br>Oh pick yourself up ‘cause<br>Legends never die<br>When the world is calling you<br>Can you hear them screaming out your name<br>Legends never die<br>They become a part of you<br>Every time you bleed for reaching greatness<br>Legends never die<br>When the world is calling out your name<br>Begging you to fight<br>Pick yourself up once more<br>Oh pick yourself up ‘cause<br>Legends never die<br>When the world is calling you<br>Can you hear them screaming out your name<br>Legends never die<br>They become a part of you<br>Every time you bleed for reaching greatness<br>Legends never die<br>When the world is calling out your name<br>Legends never die<br></p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=540854940&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Music" scheme="https://wumaozheng.com/tags/Music/"/>
    
      <category term="Freetime" scheme="https://wumaozheng.com/tags/Freetime/"/>
    
  </entry>
  
  <entry>
    <title>Java 中的 clone() 方法</title>
    <link href="https://wumaozheng.com/2018/clone.html"/>
    <id>https://wumaozheng.com/2018/clone.html</id>
    <published>2018-04-25T15:23:05.000Z</published>
    <updated>2018-09-18T12:22:46.526Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.wumaozheng.com/blog/article/JVM.jpg" alt=""></p><p>&emsp;&emsp;Object 类的 clone 是 protected 的，不能直接调用，可以被子类调用。Object 类的 clone 会知道对象的大小，为它分配足够的内存空间，并将旧对象的内容复制到新的对象中。但是，Object.clone() 执行其动作之前必须先检查 class 是否实现了 Cloneable 接口。</p><a id="more"></a><p>&emsp;&emsp;Cloneable 接口是一个标记接口，也就是没有什么内容，定义如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;只有实现了 Cloneable 接口，才可以在该类的实例上调用 clone() 方法， 否则会抛出 CloneNotSupportedException。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>;</span><br></pre></td></tr></table></figure></p><h3 id="一、引用拷贝"><a href="#一、引用拷贝" class="headerlink" title="一、引用拷贝"></a>一、引用拷贝</h3><p>&emsp;&emsp;创建一个指向对象的引用变量的拷贝。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> StringBuilder name = <span class="keyword">new</span> StringBuilder(<span class="string">"Apple"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNum</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.name = name.append(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"name="</span> + name + <span class="string">", num="</span> + num;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Apple apple1 = <span class="keyword">new</span> Apple();</span><br><span class="line">        System.out.println(<span class="string">"apple1: "</span> + apple1);</span><br><span class="line"></span><br><span class="line">        Apple apple2 = apple1;</span><br><span class="line">        apple2.addNum();</span><br><span class="line">        System.out.println(<span class="string">"apple1: "</span> + apple1);</span><br><span class="line">        System.out.println(<span class="string">"apple2: "</span> + apple2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行上述代码后控制台打印结果为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apple1: name=Apple, num=<span class="number">1</span></span><br><span class="line">apple1: name=Apple2, num=<span class="number">2</span></span><br><span class="line">apple2: name=Apple2, num=<span class="number">2</span></span><br></pre></td></tr></table></figure></p><h3 id="二、对象拷贝"><a href="#二、对象拷贝" class="headerlink" title="二、对象拷贝"></a>二、对象拷贝</h3><h4 id="1-浅拷贝："><a href="#1-浅拷贝：" class="headerlink" title="1. 浅拷贝："></a>1. 浅拷贝：</h4><p>&emsp;&emsp;被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。即对象的浅拷贝会对“主”对象进行拷贝， 但不会复制主对象里面的对象。“里面的对象”会在原来的对象和它的副本之间共享。<br>&emsp;&emsp;简而言之，浅拷贝仅仅复制所考虑的对象，而不复制它所引用的对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple1</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> StringBuilder name = <span class="keyword">new</span> StringBuilder(<span class="string">"Apple"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNum</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num +<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.name = name.append(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"name="</span> + name + <span class="string">", num="</span> + num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 浅拷贝</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Apple1 <span class="title">clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Apple1 cloned = (Apple1) <span class="keyword">super</span>.clone();</span><br><span class="line">            <span class="keyword">return</span> cloned;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException ex)</span><br><span class="line">        &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    Apple1 apple1 = <span class="keyword">new</span> Apple1();</span><br><span class="line">        System.out.println(<span class="string">"apple1: "</span> + apple1);</span><br><span class="line"></span><br><span class="line">        Apple1 apple2 = apple1.clone();</span><br><span class="line">        apple2.addNum();</span><br><span class="line">        System.out.println(<span class="string">"apple1: "</span> + apple1);</span><br><span class="line">        System.out.println(<span class="string">"apple2: "</span> + apple2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行上述代码后控制台打印结果为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apple1: name=Apple, num=<span class="number">1</span></span><br><span class="line">apple1: name=Apple2, num=<span class="number">1</span></span><br><span class="line">apple2: name=Apple2, num=<span class="number">2</span></span><br></pre></td></tr></table></figure></p><h4 id="2-深拷贝："><a href="#2-深拷贝：" class="headerlink" title="2. 深拷贝："></a>2. 深拷贝：</h4><p>&emsp;&emsp;深拷贝是一个整个独立的对象拷贝，深拷贝会拷贝所有的属性，并拷贝属性指向的动态分配的内存。当对象和它所引用的对象一起拷贝时即发生深拷贝。 深拷贝相比于浅拷贝速度较慢并且花销较大。<br>&emsp;&emsp;简而言之，深拷贝把要复制的对象所引用的对象都复制了一遍。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple2</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> StringBuilder name = <span class="keyword">new</span> StringBuilder(<span class="string">"Apple"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNum</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num +<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.name = name.append(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"name="</span> + name + <span class="string">", num="</span> + num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 深拷贝</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Apple2 <span class="title">clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Apple2 cloned = (Apple2) <span class="keyword">super</span>.clone();</span><br><span class="line">            cloned.name = <span class="keyword">new</span> StringBuilder(name);</span><br><span class="line">            <span class="keyword">return</span> cloned;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException ex)</span><br><span class="line">        &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    Apple2 apple1 = <span class="keyword">new</span> Apple2();</span><br><span class="line">        System.out.println(<span class="string">"apple1: "</span> + apple1);</span><br><span class="line"></span><br><span class="line">        Apple2 apple2 = apple1.clone();</span><br><span class="line">        apple2.addNum();</span><br><span class="line">        System.out.println(<span class="string">"apple1: "</span> + apple1);</span><br><span class="line">        System.out.println(<span class="string">"apple2: "</span> + apple2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行上述代码后控制台打印结果为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apple1: name=Apple, num=<span class="number">1</span></span><br><span class="line">apple1: name=Apple, num=<span class="number">1</span></span><br><span class="line">apple2: name=Apple2, num=<span class="number">2</span></span><br></pre></td></tr></table></figure></p><h4 id="3-深拷贝与浅拷贝的区别："><a href="#3-深拷贝与浅拷贝的区别：" class="headerlink" title="3. 深拷贝与浅拷贝的区别："></a>3. 深拷贝与浅拷贝的区别：</h4><ul><li>深拷贝和浅拷贝之间的区别在于是否复制了子对象。</li><li>深拷贝与浅拷贝问题中，会发生深拷贝的有 Java 中的 8 中基本类型以及他们的封装类型，另外还有 <code>String</code> 类型。其余的都是浅拷贝。</li></ul><h3 id="三、Java-基本数据类型"><a href="#三、Java-基本数据类型" class="headerlink" title="三、Java 基本数据类型"></a>三、Java 基本数据类型</h3><p>&emsp;&emsp;Java 是一种强类型语言。这就意味着必须为没一个变量声明一种类型。在 Java 中，一共有 8 中基本数据类型，其中有 4 种整型、2 种浮点型、1 种表示 Unicode 编码的字符单元的字符类型 char 和 1 种用于表示真值的 boolean 类型。</p><h4 id="1-Java-中的-8-种基本类型及其封装类型："><a href="#1-Java-中的-8-种基本类型及其封装类型：" class="headerlink" title="1. Java 中的 8 种基本类型及其封装类型："></a>1. Java 中的 8 种基本类型及其封装类型：</h4><ul><li>字符型：char（Character）</li><li>数值型：<br>&emsp;&emsp;1. 整数型：byte（Byte）、short（Short）、int（Integer）、long（Long）<br>&emsp;&emsp;2. 浮点型：float（Float）、double（Double）</li><li>布尔型：boolean（Boolean）</li></ul><h4 id="2-整型"><a href="#2-整型" class="headerlink" title="2. 整型"></a>2. 整型</h4><table><thead><tr><th style="text-align:center">类&emsp;型</th><th style="text-align:center">存储需求</th><th style="text-align:center">取值范围</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">1 字节</td><td style="text-align:center">-128 ~ 127</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">2 字节</td><td style="text-align:center">-32768 ~ 32767</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">4 字节</td><td style="text-align:center">-2 147 483 648 ~ 2 147 483 647（正好超过 20 亿）</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">8 字节</td><td style="text-align:center">-9 233 372 036 854 775 808 ~ 9 233 372 036 854 775 807</td></tr></tbody></table><p>&emsp;&emsp;整数用于表示没有小数部分的值，它允许是<code>负数</code>。在通常情况下，int 类型最常用。长整形数值有一个后缀 L（例如：4000000000L）。在 Java 中，整型的范围与运行 Java 代码的机器无关，这就解决了软件从一个平台移植到另一个平台，或者在同一平台中的不同操作系统之间进行移植给程序员带来的诸多问题。与此相反，C 和 C++ 程序需要针对不同的处理器选择最为有效的整型。</p><h4 id="3-浮点类型"><a href="#3-浮点类型" class="headerlink" title="3. 浮点类型"></a>3. 浮点类型</h4><table><thead><tr><th style="text-align:center">类&emsp;型</th><th style="text-align:center">存储需求</th><th style="text-align:center">取值范围</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:center">4 字节</td><td style="text-align:center">大约 $\pm$3.402 823 47E + 38F（有效位数为 6~7 位）</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8 字节</td><td style="text-align:center">大约 $\pm$1.797 693 134 862 315 70E + 308（有效位数为 15 位）</td></tr></tbody></table><p>&emsp;&emsp;浮点类型用于表示有小数部分的数值。double 表示这种类型的数值精度是 float 类型的两倍（称其为双精度数值）。绝大多部分应用程序都采用 double 类型。float 类型的数值有一个后缀 F（例如：3.14F），没有后缀 F 的浮点数值（例如：3.14）默认为 double 类型，或者添加后缀 D（例如：3.14D）。</p><ul><li>正无穷大 Double.POSITIVE_INFINITY</li><li>负无穷大 Double.NEGATIVE_INFINITY</li><li>NaN &emsp;&emsp;Double.NaN（不是一个数字）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Double.isNaN(x)) <span class="comment">// check whether x is "not a number"</span></span><br></pre></td></tr></table></figure><h4 id="4-char-类型"><a href="#4-char-类型" class="headerlink" title="4. char 类型"></a>4. char 类型</h4><p>&emsp;&emsp;char 类型用于表示单个字符，通常用来表示字符常量。例如：’A’ 是编码为 65 所对应的字符常量。与 “A” 不同，”A” 是一个包含字符 A 的字符串。Unicode 编码单元可以表示为十六进制值，其范围从 \u0000 到 \Uffff。<br><a href="https://blog.csdn.net/fedawn/article/details/7307993" target="_blank" rel="noopener">（0-9a-zA-Z）</a></p><table><thead><tr><th style="text-align:center">转义序列</th><th style="text-align:center">名称</th><th style="text-align:center">Unicode 值</th><th></th><th style="text-align:center">转义序列</th><th style="text-align:center">名称</th><th style="text-align:center">Unicode 值</th></tr></thead><tbody><tr><td style="text-align:center">\b</td><td style="text-align:center">退格</td><td style="text-align:center">\u0008</td><td></td><td style="text-align:center">\”</td><td style="text-align:center">双引号</td><td style="text-align:center">\u0022</td></tr><tr><td style="text-align:center">\t</td><td style="text-align:center">制表</td><td style="text-align:center">\u0009</td><td></td><td style="text-align:center">\’</td><td style="text-align:center">单引号</td><td style="text-align:center">\u0027</td></tr><tr><td style="text-align:center">\n</td><td style="text-align:center">换行</td><td style="text-align:center">\u000a</td></tr><tr><td style="text-align:center">\r</td><td style="text-align:center">回车</td><td style="text-align:center">\u000d</td></tr></tbody></table><h4 id="5-boolean-类型"><a href="#5-boolean-类型" class="headerlink" title="5. boolean 类型"></a>5. boolean 类型</h4><p>&emsp;&emsp;boolean（布尔）类型有两个值：false 和 true，用来判定逻辑条件。整型值和布尔值之间不能进行相互转换。在 C++ 中，数值或指针可以代替 boolean 值，值 0 相当于布尔值 false，非 0 值相当于布尔值 true，在 Java 中则不是这样。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://image.wumaozheng.com/blog/article/JVM.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;Object 类的 clone 是 protected 的，不能直接调用，可以被子类调用。Object 类的 clone 会知道对象的大小，为它分配足够的内存空间，并将旧对象的内容复制到新的对象中。但是，Object.clone() 执行其动作之前必须先检查 class 是否实现了 Cloneable 接口。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://wumaozheng.com/tags/Java/"/>
    
      <category term="Clone" scheme="https://wumaozheng.com/tags/Clone/"/>
    
      <category term="DataType" scheme="https://wumaozheng.com/tags/DataType/"/>
    
  </entry>
  
  <entry>
    <title>深入 Java 单例模式</title>
    <link href="https://wumaozheng.com/2018/Singleton-Pattern.html"/>
    <id>https://wumaozheng.com/2018/Singleton-Pattern.html</id>
    <published>2018-04-18T12:58:05.000Z</published>
    <updated>2018-09-18T12:26:11.187Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.wumaozheng.com/blog/article/singleton.jpg" alt=""></p><p>&emsp;&emsp;在 <a href="https://baike.baidu.com/item/GoF/6406151" target="_blank" rel="noopener">GoF</a> 的23种设计模式中，单例模式是比较简单的一种。然而，有时候越是简单的东西越容易出现问题。下面就单例设计模式详细的探讨一下。</p><p>&emsp;&emsp;所谓单例模式，简单来说，就是在整个应用中保证只有一个类的实例存在。就像是 Java Web 中的 application，也就是提供了一个全局变量，用处相当广泛，比如：保存全局数据，实现全局性的操作等。</p><a id="more"></a><h3 id="1-最简单的实现"><a href="#1-最简单的实现" class="headerlink" title="1. 最简单的实现"></a>1. 最简单的实现</h3><p>&emsp;&emsp;首先，能够想到的最简单的实现是，把类的构造函数写成<code>private</code>的，从而保证别的类不能实例化此类，然后在类中提供一个静态的实例并能够返回给使用者。这样，使用者就可以通过这个引用使用到这个类的实例了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonClass</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingletonClass instance = <span class="keyword">new</span> SingletonClass(); </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">SingletonClass</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> instance; </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如上例，外部使用者如果需要使用<code>SingletonClass</code>的实例，只能通过<code>getInstance()</code>方法，并且它的构造方法是<code>private</code>的，这样就保证了只能有一个对象存在。</p><h3 id="2-性能优化-—-Lazy-Loaded"><a href="#2-性能优化-—-Lazy-Loaded" class="headerlink" title="2. 性能优化 — Lazy Loaded"></a>2. 性能优化 — Lazy Loaded</h3><p>&emsp;&emsp;上面的代码虽然简单，但是有一个问题——无论这个类是否被使用，都会创建一个 instance 对象。如果这个创建过程很耗时，比如需要连接 10000 次数据库(夸张了…:-))，并且这个类还并不一定会被使用，那么这个创建过程就是无用的。怎么办呢？为了解决这个问题，我们想到了新的解决方案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonClass</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> SingletonClass instance = <span class="keyword">null</span>; </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">SingletonClass</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123; </span><br><span class="line">      instance = <span class="keyword">new</span> SingletonClass(); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> instance; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;代码的变化有两处 — 首先，把 instance 初始化为 null，直到第一次使用的时候通过判断是否为 null 来创建对象。因为创建过程不在声明处，所以那个<code>final</code>的修饰必须去掉。</p><p>&emsp;&emsp;我们来想象一下这个过程。要使用 SingletonClass，调用 getInstance() 方法。第一次的时候发现 instance 是 null，然后就新建一个对象，返回出去；第二次再使用的时候，因为这个 instance 是 static 的，所以已经不是 null 了，因此不会再创建对象，直接将其返回。</p><p>&emsp;&emsp;这个过程就称为<code>Lazy Loaded</code>，也就是迟加载 — 直到使用的时候才进行加载。</p><h3 id="3-同步"><a href="#3-同步" class="headerlink" title="3. 同步"></a>3. 同步</h3><p>&emsp;&emsp;上面的代码很清楚，也很简单。然而就像那句名言：“80% 的错误都是由 20% 代码优化引起的”。单线程下，这段代码没有什么问题，可是如果是多线程，麻烦就来了。我们来分析一下：</p><p>&emsp;&emsp;线程 A 希望使用 SingletonClass，调用 getInstance() 方法。因为是第一次调用，A 就发现 instance 是 null 的，于是它开始创建实例，就在这个时候，CPU 发生时间片切换，线程 B 开始执行，它要使用 SingletonClass，调用 getInstance() 方法，同样检测到 instance 是 null — 注意，这是在 A 检测完之后切换的，也就是说A并没有来得及创建对象——因此 B 开始创建。B 创建完成后，切换到 A 继续执行，因为它已经检测完了，所以 A 不会再检测一遍，它会直接创建对象。这样，线程 A 和 B 各自拥有一个 SingletonClass 的对象 — 单例失败！解决的方法也很简单，那就是加锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonClass</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> SingletonClass instance = <span class="keyword">null</span>; </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">SingletonClass</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> SingletonClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123; </span><br><span class="line">      instance = <span class="keyword">new</span> SingletonClass(); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> instance; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;需要在 getInstance() 加上同步锁，一个线程必须等待另外一个线程创建完成后才能使用这个方法，这就保证了单例的唯一性。</p><h3 id="4-性能问题"><a href="#4-性能问题" class="headerlink" title="4. 性能问题"></a>4. 性能问题</h3><p>&emsp;&emsp;上面的代码又是很清楚很简单的，然而，简单的东西往往不够理想。这段代码毫无疑问存在性能的问题 — <code>synchronized</code>修饰的同步块可是要比一般的代码段慢上几倍的！如果存在很多次 getInstance() 的调用，那性能问题就不得不考虑了！</p><p>&emsp;&emsp;让我们来分析一下，究竟是整个方法都必须加锁，还是仅仅其中某一句加锁就足够了？我们为什么要加锁呢？分析一下出现<code>Lazy Loaded</code>的那种情形的原因。原因就是检测 null 的操作和创建对象的操作分离了。如果这两个操作能够原子地进行，那么单例就已经保证了。于是，我们开始修改代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonClass</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> SingletonClass instance = <span class="keyword">null</span>; </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">SingletonClass</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">synchronized</span> (SingletonClass.class) &#123; </span><br><span class="line">      <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123; </span><br><span class="line">        instance = <span class="keyword">new</span> SingletonClass(); </span><br><span class="line">      &#125; </span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="keyword">return</span> instance; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;首先去掉 getInstance() 的同步操作，然后把同步锁加载<code>if</code>语句上。但是这样的修改起不到任何作用：因为每次调用 getInstance() 的时候必然要同步，性能问题还是存在。如果我们事先判断一下是不是为 null 再去同步呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonClass</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> SingletonClass instance = <span class="keyword">null</span>; </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">SingletonClass</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123; </span><br><span class="line">      <span class="keyword">synchronized</span> (SingletonClass.class) &#123; </span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123; </span><br><span class="line">          instance = <span class="keyword">new</span> SingletonClass(); </span><br><span class="line">        &#125; </span><br><span class="line">      &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> instance; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;还有问题吗？首先判断 instance 是不是为 null，如果为 null，加锁初始化；如果不为 null，直接返回 instance。这就是<code>double-checked locking</code>设计实现单例模式。到此为止，一切都很完美。我们用一种很聪明的方式实现了单例模式。</p><h3 id="5-从源头检查"><a href="#5-从源头检查" class="headerlink" title="5. 从源头检查"></a>5. 从源头检查</h3><p>&emsp;&emsp;代码。编译原理里面有一个很重要的内容是编译器优化。所谓编译器优化是指，在不改变原来语义的情况下，通过调整语句顺序，来让程序运行的更快。这个过程称为<code>reorder</code>。</p><p>&emsp;&emsp;要知道，JVM 只是一个标准，并不是实现。JVM 中并没有规定有关编译器优化的内容，也就是说，JVM 实现可以自由的进行编译器优化。</p><p>&emsp;&emsp;下面来想一下，创建一个变量需要哪些步骤呢？一个是申请一块内存，调用构造方法进行初始化操作，另一个是分配一个指针指向这块内存。这两个操作谁在前谁在后呢？JVM 规范并没有规定。那么就存在这么一种情况，JVM 是先开辟出一块内存，然后把指针指向这块内存，最后调用构造方法进行初始化。</p><p>&emsp;&emsp;下面我们来考虑这么一种情况：线程 A 开始创建 SingletonClass 的实例，此时线程 B 调用了 getInstance() 方法，首先判断 instance 是否为 null。按照我们上面所说的内存模型，A 已经把 instance 指向了那块内存，只是还没有调用构造方法，因此B检测到 instance 不为 null，于是直接把 instance 返回了 — 问题出现了，尽管 instance 不为 null，但它并没有构造完成，就像一套房子已经给了你钥匙，但你并不能住进去，因为里面还没有收拾。此时，如果 B 在 A 将 instance 构造完成之前就是用了这个实例，程序就会出现错误了！于是，我们想到了下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonClass</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> SingletonClass instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">SingletonClass</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123; </span><br><span class="line">      SingletonClass sc; </span><br><span class="line">      <span class="keyword">synchronized</span> (SingletonClass.class) &#123; </span><br><span class="line">        sc = instance; </span><br><span class="line">        <span class="keyword">if</span> (sc == <span class="keyword">null</span>) &#123; </span><br><span class="line">          <span class="keyword">synchronized</span> (SingletonClass.class) &#123; </span><br><span class="line">            <span class="keyword">if</span>(sc == <span class="keyword">null</span>) &#123; </span><br><span class="line">              sc = <span class="keyword">new</span> SingletonClass(); </span><br><span class="line">            &#125; </span><br><span class="line">          &#125; </span><br><span class="line">          instance = sc; </span><br><span class="line">        &#125; </span><br><span class="line">      &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> instance; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们在第一个同步块里面创建一个临时变量，然后使用这个临时变量进行对象的创建，并且在最后把instance指针临时变量的内存空间。写出这种代码基于以下思想，即<code>synchronized</code>会起到一个代码屏蔽的作用，同步块里面的代码和外部的代码没有联系。因此，在外部的同步块里面对临时变量<code>sc</code>进行操作并不影响 instance，所以外部类在<code>instance = sc;</code>之前检测 instance 的时候，结果 instance 依然是 null。</p><p>&emsp;&emsp;不过，这种想法完全是错误的！同步块的释放保证在此之前 — 也就是同步块里面 — 的操作必须完成，但是并不保证同步块之后的操作不能因编译器优化而调换到同步块结束之前进行。因此，编译器完全可以把<code>instance = sc;</code> 这句移到内部同步块里面执行。这样，程序又是错误的了！</p><h3 id="6-解决方案"><a href="#6-解决方案" class="headerlink" title="6. 解决方案"></a>6. 解决方案</h3><p>&emsp;&emsp;说了这么多，难道单例没有办法在 Java 中实现吗？其实不然！<br>在 JDK5 之后，Java 使用了新的内存模型。volatile关键字有了明确的语义 — 在 JDK1.5 之前，<code>volatile</code>是个关键字，但是并没有明确的规定其用途 — 被 volatile 修饰的写变量不能和之前的读写代码调整，读变量不能和之后的读写代码调整！因此，只要我们简单的把 instance 加上 volatile 关键字就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonClass</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> SingletonClass instance = <span class="keyword">null</span>; </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">SingletonClass</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123; </span><br><span class="line">      <span class="keyword">synchronized</span> (SingletonClass.class) &#123; </span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123; </span><br><span class="line">          instance = <span class="keyword">new</span> SingletonClass(); </span><br><span class="line">        &#125; </span><br><span class="line">      &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> instance; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;然而，这只是 JDK1.5 之后的 Java 的解决方案，那之前版本呢？其实，还有另外的一种解决方案，并不会受到 Java 版本的影响：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonClass</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">SingletonClass</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonClassInstance</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingletonClass instance = <span class="keyword">new</span> SingletonClass(); </span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> SingletonClassInstance.instance; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在这一版本的单例模式实现代码中，我们使用了 Java 的静态内部类。这一技术是被 JVM 明确说明了的，因此不存在任何二义性。在这段代码中，因为 SingletonClass 没有 static 的属性，因此并不会被初始化。直到调用 getInstance() 的时候，会首先加载 SingletonClassInstance 类，这个类有一个 static 的 SingletonClass 实例，因此需要调用 SingletonClass 的构造方法，然后 getInstance() 将把这个内部类的 instance 返回给使用者。由于这个 instance 是 static 的，因此并不会构造多次。</p><p>&emsp;&emsp;由于 SingletonClassInstance 是私有静态内部类，所以不会被其他类知道，同样， static 语义也要求不会有多个实例存在。并且，<a href="http://www.jsl.com/" target="_blank" rel="noopener">JSL</a> 规范定义，类的构造必须是原子性的，非并发的，因此不需要加同步块。同样，由于这个构造是并发的，所以 getInstance() 也并不需要加同步。</p><p>&emsp;&emsp;至此，我们完整的了解了单例模式在 Java 语言中的时候，提出了两种解决方案。个人偏向于第二种，并且 Effiective Java 也推荐的这种方式。</p><p>【转载】原文出处：<a href="http://devbean.blog.51cto.com/448512/203501" target="_blank" rel="noopener">【豆子空间 http://devbean.blog.51cto.com/448512/203501】</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://image.wumaozheng.com/blog/article/singleton.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;在 &lt;a href=&quot;https://baike.baidu.com/item/GoF/6406151&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GoF&lt;/a&gt; 的23种设计模式中，单例模式是比较简单的一种。然而，有时候越是简单的东西越容易出现问题。下面就单例设计模式详细的探讨一下。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;所谓单例模式，简单来说，就是在整个应用中保证只有一个类的实例存在。就像是 Java Web 中的 application，也就是提供了一个全局变量，用处相当广泛，比如：保存全局数据，实现全局性的操作等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://wumaozheng.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://wumaozheng.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>23种设计模式总览</title>
    <link href="https://wumaozheng.com/2018/Design-Pattern-Introduction.html"/>
    <id>https://wumaozheng.com/2018/Design-Pattern-Introduction.html</id>
    <published>2018-04-17T12:33:05.000Z</published>
    <updated>2018-09-18T12:25:47.462Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.wumaozheng.com/blog/article/design.jpg" alt=""></p><p>&emsp;&emsp;设计模式（Design Pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了更好的代码<code>可重用性</code>、<code>可读性</code>、<code>可靠性</code>和<code>可维护性</code>。</p><a id="more"></a><h3 id="一、设计模式3大分类"><a href="#一、设计模式3大分类" class="headerlink" title="一、设计模式3大分类"></a>一、设计模式3大分类</h3><p>&emsp;<strong>1. 创建型模式（5种）</strong></p><ul><li>单例模式（Singleton Pattern）</li><li>工厂方法模式（Factory Method Pattern）</li><li>抽象工厂模式（Abstract Factory Pattern）</li><li>建造者模式（Builder Pattern）</li><li>原型模式（Prototype Pattern）</li></ul><p>&emsp;<strong>2.  结构型模式（7种）</strong></p><ul><li>适配器模式（Adapter Pattern）</li><li>装饰者模式（Decorator Pattern）</li><li>代理模式（Proxy Pattern）</li><li>外观模式（Facade Pattern）</li><li>桥接模式（Bridge Pattern）</li><li>组合模式（Composite Pattern）</li><li>享元模式（Flyweight Pattern）  </li></ul><p>&emsp;<strong>3.  行为型模式（11种）</strong></p><ul><li>策略模式（Strategy Pattern）</li><li>模板方法模式（Template Method Pattern）</li><li>观察者模式（Observer Pattern）</li><li>迭代器模式（Iterator Pattern）</li><li>责任链模式（Chain Of Responsibility Pattern）</li><li>命令模式（Command Pattern）</li><li>备忘录模式（Memento Pattern）</li><li>状态模式（Status Pattern）</li><li>访问者模式（Visitor Pattern）</li><li>中介者模式（Mediator Pattern）</li><li>解释器模式（Interpreter Pattern）</li></ul><h3 id="二、设计模式6大原则"><a href="#二、设计模式6大原则" class="headerlink" title="二、设计模式6大原则"></a>二、设计模式6大原则</h3><p>&emsp;<strong>1. 单一职责原则（Single Responsibility Principle, SRP）</strong><br>&emsp;&emsp;<code>就一个类而言，应该只有一个引起它变化的原因。</code></p><ul><li>降低类的复杂度，一个类只负责一项职责；</li><li>提高类的可读性和可维护性；</li><li>降低变更引起的风险。</li></ul><p>&emsp;<strong>2. 里氏替换原则（Liskov Substitution Principle, LSP）</strong><br>&emsp;&emsp;<code>所有引用基类（父类）的地方必须能透明地使用其子类的对象。</code></p><ul><li>里氏替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。</li><li>任何基类可以出现的地方，子类一定可以出现。里氏替换原则是继承复用的基石，只有当衍生类可以替换基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。</li></ul><p>&emsp;<strong>3. 依赖倒转原则（Dependence Inversion Principle, DIP）</strong><br>&emsp;&emsp;<code>抽象不应该依赖于细节，细节应当依赖于抽象。换言之，要针对接口编程，而不是针对实现编程。</code></p><ul><li>在实现依赖倒转原则时，我们需要针对抽象层编程，而将具体类的对象通过依赖注入（DependencyInjection, DI）的方式注入到其他对象中，依赖注入是指当一个对象要与其他对象发生依赖关系时，通过抽象来注入所依赖的对象。</li><li>常用的注入方式有三种，分别是：<code>构造注入</code>，<code>设值注入（Setter注入）</code>和<code>接口注入</code>。构造注入是指通过构造函数来传入具体类的对象，设值注入是指通过 Setter 方法来传入具体类的对象，而接口注入是指通过在接口中声明的业务方法来传入具体类的对象。这些方法在定义时使用的是抽象类型，在运行时再传入具体类型的对象，由子类对象来覆盖父类对象。</li></ul><p>&emsp;<strong>4. 接口隔离原则（Interface Segregation Principle, ISP）</strong><br>&emsp;&emsp;<code>使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。</code></p><ul><li>每个接口中不存在子类用不到却必须实现的方法，若存在，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。</li></ul><p>&emsp;<strong>5. 迪米特法则（Demeter Principle, DP)</strong><br>&emsp;&emsp;<code>一个软件实体应当尽可能少地与其他实体发生相互作用。</code></p><ul><li>迪米特法则又称为最少知识原则（Least Knowledge Principle, LKP）。一个类对自己依赖的类知道的越少越好。无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过 public 方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类。</li></ul><p>&emsp;<strong>6. 开闭原则（Composite Reuse Principle, CRP）</strong><br>&emsp;&emsp;<code>一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。</code></p><ul><li>开闭原则是面向对象的可复用设计的第一块基石，它是最重要的面向对象设计原则。在开闭原则的定义中，软件实体可以指一个软件模块、一个由多个类组成的局部结构或一个独立的类。</li></ul><h3 id="三、设计模式之间的关系图"><a href="#三、设计模式之间的关系图" class="headerlink" title="三、设计模式之间的关系图"></a>三、设计模式之间的关系图</h3><p><img src="https://t1.picb.cc/uploads/2018/05/10/2h6UCe.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://image.wumaozheng.com/blog/article/design.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;设计模式（Design Pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了更好的代码&lt;code&gt;可重用性&lt;/code&gt;、&lt;code&gt;可读性&lt;/code&gt;、&lt;code&gt;可靠性&lt;/code&gt;和&lt;code&gt;可维护性&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://wumaozheng.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://wumaozheng.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Music-For-NBA</title>
    <link href="https://wumaozheng.com/2018/Music-For-NBA.html"/>
    <id>https://wumaozheng.com/2018/Music-For-NBA.html</id>
    <published>2018-03-14T08:15:25.000Z</published>
    <updated>2018-05-15T14:46:08.743Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1934675&auto=0&height=66"></iframe><ol><li><a href="http://music.163.com/#/song?id=1345018" target="_blank" rel="noopener">《Remember The Name》</a></li><li><a href="http://music.163.com/#/song?id=19164061" target="_blank" rel="noopener">《One Day Too Late》</a></li><li><a href="http://music.163.com/#/song?id=5041603" target="_blank" rel="noopener">《Amazing》</a></li><li><a href="http://music.163.com/#/song?id=3027393" target="_blank" rel="noopener">《Hero》</a></li><li><a href="http://music.163.com/#/song?id=1872305" target="_blank" rel="noopener">《I Believe I Can Fly》</a></li></ol><a id="more"></a><ul><li><a href="http://music.163.com/#/song?id=27955120" target="_blank" rel="noopener">《Champions》</a></li><li><a href="http://music.163.com/#/song?id=32166698" target="_blank" rel="noopener">《Go Big or Go Home》</a></li><li><a href="http://music.163.com/#/song?id=28557184" target="_blank" rel="noopener">《Last Night》</a></li><li><a href="http://music.163.com/#/song?id=5100462" target="_blank" rel="noopener">《Dilemma》</a></li><li><a href="http://music.163.com/#/song?id=2119851" target="_blank" rel="noopener">《Gotta Work》</a></li><li><a href="http://music.163.com/#/song?id=2309552" target="_blank" rel="noopener">《Fighter》</a></li><li><a href="http://music.163.com/#/song?id=1695569" target="_blank" rel="noopener">《Lollipop》</a></li><li><a href="http://music.163.com/#/song?id=520458035" target="_blank" rel="noopener">《Crazy》</a></li><li><a href="http://music.163.com/#/song?id=26145007" target="_blank" rel="noopener">《Feel This Moment》</a></li><li><a href="http://music.163.com/#/song?id=28174944" target="_blank" rel="noopener">《Timber》</a></li><li><a href="http://music.163.com/#/song?id=17572184" target="_blank" rel="noopener">《Forever》</a></li><li><a href="http://music.163.com/#/song?id=1934675" target="_blank" rel="noopener">《Purp &amp; Yellow》</a></li><li><a href="http://music.163.com/#/song?id=3928108" target="_blank" rel="noopener">《Gorillas》</a></li><li><a href="http://music.163.com/#/song?id=1571934" target="_blank" rel="noopener">《Roundball Rock》</a></li><li><a href="http://music.163.com/#/song?id=500684014" target="_blank" rel="noopener">《Everyday》</a></li><li><a href="http://music.163.com/#/song?id=33933740" target="_blank" rel="noopener">《Live Forever》</a></li><li><a href="http://music.163.com/#/song?id=19561011" target="_blank" rel="noopener">《If I Die Young》</a></li><li><a href="http://music.163.com/#/song?id=436016809" target="_blank" rel="noopener">《Sirius》</a></li><li><a href="http://music.163.com/#/song?id=29719530" target="_blank" rel="noopener">《Black Dog》</a></li><li><a href="http://music.163.com/#/song?id=26244634" target="_blank" rel="noopener">《Can’t Hold Us》</a></li><li><a href="http://music.163.com/#/song?id=1474900" target="_blank" rel="noopener">《Run This Town》</a></li><li><a href="http://music.163.com/#/song?id=16821774" target="_blank" rel="noopener">《Waving Flags》</a></li><li><a href="http://music.163.com/#/song?id=21157332" target="_blank" rel="noopener">《One Day》</a></li><li><a href="http://music.163.com/#/song?id=5162502" target="_blank" rel="noopener">《All Rise》</a></li></ul><p>&emsp;&emsp;<a href="http://music.163.com/#/user/home?id=95095313" target="_blank" rel="noopener">我的（梦飞扬-001）网易云音乐主页&gt;&gt;</a> —— 分享给同样喜欢 NBA 的你！</p>]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=1934675&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://music.163.com/#/song?id=1345018&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Remember The Name》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://music.163.com/#/song?id=19164061&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《One Day Too Late》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://music.163.com/#/song?id=5041603&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Amazing》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://music.163.com/#/song?id=3027393&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Hero》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://music.163.com/#/song?id=1872305&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《I Believe I Can Fly》&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="NBA" scheme="https://wumaozheng.com/tags/NBA/"/>
    
      <category term="Music" scheme="https://wumaozheng.com/tags/Music/"/>
    
      <category term="Freetime" scheme="https://wumaozheng.com/tags/Freetime/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis3.4-知识小结</title>
    <link href="https://wumaozheng.com/2018/mybatis3.4-technology-insider.html"/>
    <id>https://wumaozheng.com/2018/mybatis3.4-technology-insider.html</id>
    <published>2018-03-05T06:58:45.000Z</published>
    <updated>2018-09-18T12:38:32.277Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.wumaozheng.com/blog/article/Mybatis-1.jpg" alt=""></p><p>&emsp;&emsp;MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs（Plain Old Java Objects，普通的 Java对象）映射成数据库中的记录。</p><a id="more"></a><p><img src="https://image.wumaozheng.com/blog/article/Mybatis-2.jpg&quot;" alt=""></p><h3 id="一、Mybatis知识点小结"><a href="#一、Mybatis知识点小结" class="headerlink" title="一、Mybatis知识点小结"></a>一、Mybatis知识点小结</h3><h3 id="Q1-SqlMapConfig-xml-中的配置有哪些内容？"><a href="#Q1-SqlMapConfig-xml-中的配置有哪些内容？" class="headerlink" title="Q1: SqlMapConfig.xml 中的配置有哪些内容？"></a>Q1: SqlMapConfig.xml 中的配置有哪些内容？</h3><ul><li>properties（属性）</li><li>settings（配置）</li><li>typeAliases（类型别名）</li><li>typeHandlers（类型处理器）</li><li>objectFactory（对象工厂）</li><li>plugins（插件）</li><li>environments（环境集合属性对象）</li><li>environment（环境子属性对象）</li><li>transactionManager（事务管理）</li><li>dataSource（数据源）</li><li>mappers（映射器）</li></ul><h3 id="Q2-Mybatis-的优势是什么？"><a href="#Q2-Mybatis-的优势是什么？" class="headerlink" title="Q2: Mybatis 的优势是什么？"></a>Q2: Mybatis 的优势是什么？</h3><ul><li>Mybatis 把 SQL 语句从 Java 源程序中独立出来，放在单独的 XML 文件中编写，给程序的维护带来了很大便利。</li><li>Mybatis 封装了底层 JDBC API 的调用细节，并能自动将结果集转换成 Java Bean 对象，大大简化了 Java 数据库编程的重复工作。</li><li>因为 Mybatis 需 要程序员自己去编写 SQL 语句，程序员可以结合数据库自身的特点灵活控制 SQL 语句，因此能够实现比<code>Hibernate</code>等全自动<code>ORM框架</code>更高的查询效率，能够完成复杂查询。</li></ul><h3 id="Q3-使用-MyBatis-的-Mapper-接口调用时有哪些要求？"><a href="#Q3-使用-MyBatis-的-Mapper-接口调用时有哪些要求？" class="headerlink" title="Q3: 使用 MyBatis 的 Mapper 接口调用时有哪些要求？"></a>Q3: 使用 MyBatis 的 Mapper 接口调用时有哪些要求？</h3><ul><li>Mapper 接口方法名和<code>mapper.xml</code>中定义的每个 SQL 的 ID 相同；</li><li>Mapper 接口方法的输入参数类型和<code>mapper.xml</code>中定义的每个 SQL 的<code>parameterType</code>的类型相同 ；</li><li>Mapper 接口方法的输出参数类型和<code>mapper.xml</code>中定义的每个 SQL 的<code>resultType</code>的类型相同 ；</li><li>Mapper.xml 文件中的 namespace 即是 mapper 接口的类路径。</li></ul><h3 id="Q4-JDBC-编程有哪些不足之处，MyBatis-是如何解决这些问题的？"><a href="#Q4-JDBC-编程有哪些不足之处，MyBatis-是如何解决这些问题的？" class="headerlink" title="Q4: JDBC 编程有哪些不足之处，MyBatis 是如何解决这些问题的？"></a>Q4: JDBC 编程有哪些不足之处，MyBatis 是如何解决这些问题的？</h3><ul><li>数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库链接池可解决此问题。<br><code>在 SqlMapConfig.xml 中配置数据链接池，使用连接池管理数据库链接。</code></li><li>SQL 语句写在代码中造成代码不易维护，实际应用 SQL 变化的可能较大，SQL 变动需要改变 Java 代码。<br><code>将 SQL 语句配置在 XXXmapper.xml 文件中与 Java 代码分离。</code></li><li>向 SQL 语句传参数麻烦，因为 SQL 语句的 WHERE 条件不一定，可能多也可能少，占位符需要和参数一一对应。<br><code>Mybatis 自动将 Java 对象映射至 SQL 语句。</code></li><li>对结果集解析麻烦，SQL 变化导致解析代码变化，且解析前需要遍历，如果能将数据库记录封装成 POJO 对象解析比较方便。<br><code>Mybatis 自动将 SQL 执行结果映射至 Java 对象。</code></li></ul><h3 id="Q5-模糊查询-LIKE-语句该怎么写"><a href="#Q5-模糊查询-LIKE-语句该怎么写" class="headerlink" title="Q5: 模糊查询 LIKE 语句该怎么写?"></a>Q5: 模糊查询 LIKE 语句该怎么写?</h3><p>&emsp;（1）在 Java 代码中添加 SQL 通配符：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String comment = “%多次%”; </span><br><span class="line">List&lt;comment&gt; comments = Mapper.selectLike(comment);</span><br></pre></td></tr></table></figure></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> foo <span class="keyword">WHERE</span> <span class="keyword">comment</span> <span class="keyword">LIKE</span> #&#123;<span class="keyword">comment</span>&#125;</span><br></pre></td></tr></table></figure><p>&emsp;（2）在 SQL 语句中拼接通配符，会引起 SQL 注入：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String comment = <span class="string">"多次"</span>; </span><br><span class="line">List&lt;comment&gt; comments = Mapper.selectLike(comment);</span><br></pre></td></tr></table></figure></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> foo <span class="keyword">WHERE</span> <span class="keyword">comment</span> <span class="keyword">LIKE</span> <span class="string">"%"</span>#&#123;<span class="keyword">comment</span>&#125;<span class="string">"%"</span></span><br></pre></td></tr></table></figure><h3 id="Q6-在-Mapper-中如何传递多个不同类型的参数"><a href="#Q6-在-Mapper-中如何传递多个不同类型的参数" class="headerlink" title="Q6: 在 Mapper 中如何传递多个不同类型的参数?"></a>Q6: 在 Mapper 中如何传递多个不同类型的参数?</h3><blockquote><p>&emsp;&emsp;在 DAO 接口中使用<code>@param</code>注解。如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.param; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">userDAO</span></span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="function">User <span class="title">findUser</span><span class="params">(@param(<span class="string">"gender"</span>)</span> <span class="keyword">boolean</span> gender, @<span class="title">param</span><span class="params">(“age”)</span> <span class="keyword">int</span> age)</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Q7-简单说一下-MyBatis-的一级缓存和二级缓存？"><a href="#Q7-简单说一下-MyBatis-的一级缓存和二级缓存？" class="headerlink" title="Q7: 简单说一下 MyBatis 的一级缓存和二级缓存？"></a>Q7: 简单说一下 MyBatis 的一级缓存和二级缓存？</h3><blockquote><p>&emsp;&emsp;Mybatis 的一级缓存是指<code>SqlSession</code>，作用域是一个 SqlSession，Mybatis 默认开启一级缓存；在同一个 SqlSession 中，执行相同的 SQL 查询，第一次回去查询数据库，并写到还存中，第二次直接从缓存中取。当执行 SQL 时两次查询中间发生了增删改操作，则 SqlSession 的缓存清空。<br>&emsp;&emsp;Mybatis 的二级缓存是指 mapper 映射文件（即查询缓存），作用域是同一个<code>namespace</code>下的 mapper 映射文件内容，即在同一个 namespace 中查询 SQL 可以从缓存中获取数据。二级缓存是可以跨 SqlSession 的（多个SqlSession共享）。需手动设置开启二级缓存。</p></blockquote><h3 id="Q8-IBatis-和-MyBatis-的核心处理类分别叫什么？"><a href="#Q8-IBatis-和-MyBatis-的核心处理类分别叫什么？" class="headerlink" title="Q8: IBatis 和 MyBatis 的核心处理类分别叫什么？"></a>Q8: IBatis 和 MyBatis 的核心处理类分别叫什么？</h3><blockquote><p>&emsp;&emsp;IBatis 里面的核心处理类：<code>SqlMapClient</code>，MyBatis 里面的核心处理类：<code>SqlSession</code>。</p></blockquote><h3 id="Q9-和-的区别是什么？"><a href="#Q9-和-的区别是什么？" class="headerlink" title="Q9: #{} 和 ${} 的区别是什么？"></a>Q9: #{} 和 ${} 的区别是什么？</h3><blockquote><p>&emsp;&emsp;<code>#{}</code>是 SQL 的参数占位符，Mybatis 会将 SQL 中的<code>#{}</code>替换为<code>?</code>号，在 SQL 执行前会使用<code>PreparedStatement</code>的参数设置方法，按序给 SQL 的<code>?</code>号占位符设置参数值，比如: <code>ps.setInt(0, parameterValue)</code>，<code>#{item.name}</code>的取值方式为使用反射从参数对象中获取 item 对象的 name 属性值，相当于<code>param.getItem().getName()</code>。<br>&emsp;&emsp;<code>${}</code>是 Properties 文件中的变量占位符，它可以用于标签属性值和 SQL 内部，属于静态文本替换，比如<code>${driver}</code>会被静态替换为<code>com.mysql.jdbc.Driver</code>。</p></blockquote><h3 id="Q10-XML-映射文件中，除了常见的-lt-select-gt-、-lt-insert-gt-、-lt-update-gt-、-lt-delete-gt-标签之外，还有哪些标签？"><a href="#Q10-XML-映射文件中，除了常见的-lt-select-gt-、-lt-insert-gt-、-lt-update-gt-、-lt-delete-gt-标签之外，还有哪些标签？" class="headerlink" title="Q10: XML 映射文件中，除了常见的&lt;select&gt;、&lt;insert&gt;、&lt;update&gt;、&lt;delete&gt;标签之外，还有哪些标签？"></a>Q10: XML 映射文件中，除了常见的<code>&lt;select&gt;</code>、<code>&lt;insert&gt;</code>、<code>&lt;update&gt;</code>、<code>&lt;delete&gt;</code>标签之外，还有哪些标签？</h3><blockquote><p>&emsp;&emsp;除此之外还有: <code>&lt;resultMap&gt;</code>、<code>&lt;parameterMap&gt;</code>、<code>&lt;sql&gt;</code>、<code>&lt;include&gt;</code>、<code>&lt;selectKey&gt;</code>，加上动态sql的9个标签: <code>&lt;trim&gt;</code>、<code>&lt;where&gt;</code>、<code>&lt;set&gt;</code>、<code>&lt;foreach&gt;</code>、<code>&lt;if&gt;</code>、<code>&lt;choose&gt;</code>、<code>&lt;when&gt;</code>、<code>&lt;otherwise&gt;</code>、<code>&lt;bind&gt;</code>等，其中<code>&lt;sql&gt;</code>为sql片段标签，通过<code>&lt;include&gt;</code>标签引入sql片段，<code>&lt;selectKey&gt;</code>为不支持自增的主键生成策略标签。</p></blockquote><h3 id="Q11-最佳实践中，通常一个XML映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗？"><a href="#Q11-最佳实践中，通常一个XML映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗？" class="headerlink" title="Q11: 最佳实践中，通常一个XML映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗？"></a>Q11: 最佳实践中，通常一个<code>XML</code>映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗？</h3><blockquote><p>&emsp;&emsp;Dao 接口，就是人们常说的 Mapper 接口，接口的全限名，就是映射文件中的<code>namespace</code>的值，接口的方法名，就是映射文件中<code>MappedStatement</code>的id值，接口方法内的参数，就是传递给 SQL 的参数。Mapper 接口是没有实现类的，当调用接口方法时，<code>接口全限名+方法</code>名拼接字符串作为key值，可唯一定位一个MappedStatement，举例：com.mybatis3.mappers.StudentDao.findStudentById，可以唯一找到namespace为com.mybatis3.mappers.StudentDao下面id = findStudentById的MappedStatement。在Mybatis中，每一个<code>&lt;select&gt;</code>、<code>&lt;insert&gt;</code>、<code>&lt;update&gt;</code>、<code>&lt;delete&gt;</code>标签，都会被解析为一个<code>MappedStatement</code>对象。<br>&emsp;&emsp;Dao 接口里的方法，是不能重载的，因为是<code>全限名+方法</code>名的保存和寻找策略。<br>&emsp;&emsp;Dao 接口的工作原理是<code>JDK动态代理</code>，Mybatis 运行时会使用 JDK 动态代理为 Dao 接口生成代理 proxy 对象，代理对象 proxy 会拦截接口方法，转而执行 MappedStatement 所代表的 SQL，然后将 SQL 执行结果返回。</p></blockquote><h3 id="Q12-Mybatis-是如何进行分页的？分页插件的原理是什么？"><a href="#Q12-Mybatis-是如何进行分页的？分页插件的原理是什么？" class="headerlink" title="Q12: Mybatis 是如何进行分页的？分页插件的原理是什么？"></a>Q12: Mybatis 是如何进行分页的？分页插件的原理是什么？</h3><blockquote><p>&emsp;&emsp;Mybatis 使用<code>RowBounds</code>对象进行分页，它是针对<code>ResultSet</code>结果集执行的内存分页，而非物理分页，可以在 SQL 内直接书写带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成物理分页。<br>&emsp;&emsp;分页插件的基本原理是使用 Mybatis 提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的 SQL，然后重写 SQL，添加对应的物理分页语句和物理分页参数。<br>&emsp;&emsp;举例：<code>select * from student</code>，拦截 SQL 后重写为：<code>select t.* from （select * from student）t limit 0，10</code>。</p></blockquote><h3 id="Q13-简述-Mybatis-的插件运行原理，以及如何编写一个插件？"><a href="#Q13-简述-Mybatis-的插件运行原理，以及如何编写一个插件？" class="headerlink" title="Q13: 简述 Mybatis 的插件运行原理，以及如何编写一个插件？"></a>Q13: 简述 Mybatis 的插件运行原理，以及如何编写一个插件？</h3><blockquote><p>&emsp;&emsp;Mybatis仅可以编写针对<code>ParameterHandler</code>、<code>ResultSetHandler</code>、<code>StatementHandler</code>、<code>Executor</code>这4种接口的插件，<code>Mybatis 使用 JDK 的动态代理</code>，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行这4种接口对象的方法时，就会进入拦截方法，具体就是<code>InvocationHandler</code>的<code>invoke()</code>方法，当然，只会拦截那些你指定需要拦截的方法。<br>&emsp;&emsp;实现 Mybatis 的<code>Interceptor接口</code>并复写<code>intercept()</code>方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，记住，别忘了在配置文件中配置你编写的插件。</p></blockquote><h3 id="Q14-Mybatis-执行批量插入，能返回数据库主键列表吗？"><a href="#Q14-Mybatis-执行批量插入，能返回数据库主键列表吗？" class="headerlink" title="Q14: Mybatis 执行批量插入，能返回数据库主键列表吗？"></a>Q14: Mybatis 执行批量插入，能返回数据库主键列表吗？</h3><blockquote><p>&emsp;&emsp;能，JDBC都能，Mybatis当然也能。</p></blockquote><h3 id="Q15-如何实现-Mybatis-执行插入数据并返回数据库主键？"><a href="#Q15-如何实现-Mybatis-执行插入数据并返回数据库主键？" class="headerlink" title="Q15: 如何实现 Mybatis 执行插入数据并返回数据库主键？"></a>Q15: 如何实现 Mybatis 执行插入数据并返回数据库主键？</h3><blockquote><p>&emsp;&emsp;在 Mybatis+MySQL（主键为数值型且自增）中：<code>useGeneratedKeys=&quot;true&quot;</code>设置是否使用 JDBC 的 getGenereatedKeys 方法获取主键并赋值到 keyProperty 设置的领域模型属性中。MySQL 和 SQLServer 执行 auto-generated key field，因此当数据库设置好自增长主键后，可通过 JDBC 的 getGeneratedKeys 方法获取。但像 Oralce 等不支持 auto-generated key field 的数据库就不能用这种方法获取主键了。默认为: false。<br>&emsp;&emsp;<code>keyProperty=&quot;userId&quot;</code>（仅对 insert 有用） 标记一个属性, MyBatis 会通过 getGeneratedKeys 或者通过 insert 语句的 selectKey 子元素设置它的值。默认: 不设置。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertAndGetId"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"userId"</span> <span class="attr">parameterType</span>=<span class="string">"com.cqupt.mauger.User"</span>&gt;</span></span><br><span class="line">    INSERT INTO yudeshui_user_info(user_name, password, creat_time) VALUES(#&#123;userName&#125;, #&#123;password&#125;, now())</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;或者利用MySQL的<code>LAST_INSERT_ID()</code>方法获取插入记录的主键，SELECT LAST_INSERT_ID()可以在插入数据后，查询并返回刚插入数据的主键（但是单独执行这条语句只会返回 0）。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.cqupt.mauger.User"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"userId"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">           SELECT LAST_INSERT_ID()</span><br><span class="line">       <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    INSERT INTO yudeshui_user_info(user_name, password, creat_time) VALUES(#&#123;userName&#125;, #&#123;password&#125;, now());</span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>&emsp;&emsp;主键为UUID时（主键必须为字符类型），使用MySQL的<code>UUID()</code>方法获取随机的UUID作为主键，<code>SELECT UUID()</code>可以在插入数据前，生成随机的UUID并通过<code>keyProperty</code>赋值给将要插入记录的主键。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.cqupt.mauger.User"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"userId"</span> <span class="attr">order</span>=<span class="string">"BEFORE"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line">           SELECT UUID()</span><br><span class="line">       <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">       INSERT INTO yudeshui_user_info(user_name, password, creat_time) VALUES(#&#123;userName&#125;, #&#123;password&#125;, now());</span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Q16-Mybatis-动态-SQL-是做什么的？都有哪些动态-SQL？请简述动态-SQL-的执行原理？"><a href="#Q16-Mybatis-动态-SQL-是做什么的？都有哪些动态-SQL？请简述动态-SQL-的执行原理？" class="headerlink" title="Q16: Mybatis 动态 SQL 是做什么的？都有哪些动态 SQL？请简述动态 SQL 的执行原理？"></a>Q16: Mybatis 动态 SQL 是做什么的？都有哪些动态 SQL？请简述动态 SQL 的执行原理？</h3><blockquote><p>&emsp;&emsp;Mybatis动态 SQL 是指在 XML 映射文件内以标签的形式编写动态 SQL，完成逻辑判断和动态拼接 SQL 的功能。<br>&emsp;&emsp;Mybatis提供了9种动态 SQL标签：<code>&lt;trim&gt;</code>、<code>&lt;where&gt;</code>、<code>&lt;set&gt;</code>、<code>&lt;foreach&gt;</code>、<code>&lt;if&gt;</code>、<code>&lt;choose&gt;</code>、<code>&lt;when&gt;</code>、<code>&lt;otherwise&gt;</code>、<code>&lt;bind&gt;</code>。<br>&emsp;&emsp;其执行原理为：使用 OGNL 从 SQL 参数对象中计算表达式的值，根据表达式的值动态拼接 SQL，以此来完成动态 SQL 的功能。<br>&emsp;&emsp;<a href="https://baike.baidu.com/item/OGNL" target="_blank" rel="noopener">OGNL</a>（Object-Graph Navigation Language）是对象图导航语言的缩写，他是一个开源项目。Struts2 框架使用 OGNL 作为默认的表达式语言。<br>&emsp;&emsp;<a href="https://baike.baidu.com/item/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F" target="_blank" rel="noopener">EL</a>（Expression Language）是为了使 JSP 写起来更加简单。表达式语言的灵感来自于 ECMAScript 和 XPath 表达式语言，它提供了在 JSP 中简化表达式的方法，让Jsp的代码更加简化。<br>&emsp;&emsp;<a href="https://baike.baidu.com/item/JSTL" target="_blank" rel="noopener">JSTL</a>（JavaServer Pages Standard Tag Library）是 JSP 标准标签库，由 apache 的 jakarta 小组来维护的。JSTL只能运行在支持 JSP1.2 和 Servlet2.3 规范的容器上，如 Tomcat 4.x。在 JSP 2.0 中也是作为标准支持的。</p></blockquote><h3 id="Q17-Mybatis-是如何将-SQL-执行结果封装为目标对象并返回的？都有哪些映射形式？"><a href="#Q17-Mybatis-是如何将-SQL-执行结果封装为目标对象并返回的？都有哪些映射形式？" class="headerlink" title="Q17:  Mybatis 是如何将 SQL 执行结果封装为目标对象并返回的？都有哪些映射形式？"></a>Q17:  Mybatis 是如何将 SQL 执行结果封装为目标对象并返回的？都有哪些映射形式？</h3><blockquote><p>&emsp;&emsp;第一种是使用<code>&lt;resultMap&gt;</code>标签，逐一定义列名和对象属性名之间的映射关系。第二种是使用 SQL 列的别名功能，将列的别名书写为对象属性名，比如：T_NAME AS NAME，对象属性名一般是 name，小写，但是列名不区分大小写，Mybatis 会忽略列名大小写，智能找到与之对应对象属性名，你甚至可以写成 T_NAME AS NaMe，Mybatis 一样可以正常工作。<br>&emsp;&emsp;有了列名与属性名的映射关系后，Mybatis 通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的。</p></blockquote><h3 id="Q18-Mybatis-能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别是什么？"><a href="#Q18-Mybatis-能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别是什么？" class="headerlink" title="Q18: Mybatis 能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别是什么？"></a>Q18: Mybatis 能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别是什么？</h3><blockquote><p>&emsp;&emsp;能，Mybatis 不仅可以执行一对一、一对多的关联查询，还可以执行多对一、多对多的关联查询。多对一查询，其实就是一对一查询，只需要把<code>selectOne()</code>修改为<code>selectList()</code>即可；多对多查询，其实就是一对多查询，只需要把 selectOne() 修改为 selectList() 即可。<br>&emsp;&emsp;关联对象查询，有两种实现方式：一种是单独发送一个 SQL 去查询关联对象，赋给主对象，然后返回主对象。另一种是使用嵌套查询，嵌套查询的含义为使用<code>join</code>查询，一部分列是A对象的属性值，另外一部分列是关联对象B的属性值，好处是只发一个 SQL 查询，就可以把主对象和其关联对象查出来。<br>&emsp;&emsp;那么问题来了，<code>join</code>查询出来100条记录，如何确定主对象是5个，而不是100个？其去重复（DISTINCT）的原理是<code>&lt;resultMap&gt;</code>标签内的<code>&lt;id&gt;</code>子标签，指定了唯一确定一条记录的id列，Mybatis 根据<code>&lt;id&gt;</code>列值来完成100条记录的去重复功能，<code>&lt;id&gt;</code>可以有多个，代表了联合主键的语意。<br>&emsp;&emsp;同样主对象的关联对象，也是根据这个原理去重复的，尽管一般情况下，只有主对象会有重复记录，关联对象一般不会重复。</p></blockquote><h3 id="Q19-Mybatis-是否支持延迟加载？如果支持，它的实现原理是什么？"><a href="#Q19-Mybatis-是否支持延迟加载？如果支持，它的实现原理是什么？" class="headerlink" title="Q19: Mybatis 是否支持延迟加载？如果支持，它的实现原理是什么？"></a>Q19: Mybatis 是否支持延迟加载？如果支持，它的实现原理是什么？</h3><blockquote><p>&emsp;&emsp;Mybatis 仅支持<code>association</code>关联对象和<code>collection</code>关联集合对象的延迟加载，<code>association</code>指的就是一对一，<code>collection</code>指的就是一对多查询。在 Mybatis 配置文件中，可以配置是否启用延迟加载<code>lazyLoadingEnabled=true|false</code>。<br>&emsp;&emsp;它的原理是，使用 CGLIB 创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用 a.getB().getName()，拦截器 invoke() 方法发现 a.getB() 是 null 值，那么就会单独发送事先保存好的查询关联B对象的 SQL，把B查询上来，然后调用 a.setB(b)，于是a的对象b属性就有值了，接着完成 a.getB().getName() 方法的调用。这就是延迟加载的基本原理。<br>&emsp;&emsp;当然了，不光是 Mybatis，几乎所有的包括 Hibernate，支持延迟加载的原理都是一样的。</p></blockquote><h3 id="Q20-Mybatis-的-XML-映射文件中，不同的-XML-映射文件，ID是否可以重复？"><a href="#Q20-Mybatis-的-XML-映射文件中，不同的-XML-映射文件，ID是否可以重复？" class="headerlink" title="Q20: Mybatis 的 XML 映射文件中，不同的 XML 映射文件，ID是否可以重复？"></a>Q20: Mybatis 的 XML 映射文件中，不同的 XML 映射文件，<code>ID</code>是否可以重复？</h3><blockquote><p>&emsp;&emsp;不同的 xml 映射文件，如果配置了 namespace，那么 ID 可以重复；如果没有配置 namespace，那么 ID 不能重复；毕竟 namespace 不是必须的，只是最佳实践而已。<br>&emsp;&emsp;原因就是<code>namespace+id</code>是作为<code>Map&lt;String, MappedStatement&gt;</code>的 key 使用的，如果没有 namespace，就剩下 ID，那么，ID 重复会导致数据互相覆盖。有了 namespace，自然 ID 就可以重复，namespace不同，namespace+id自然也就不同。</p></blockquote><h3 id="Q21-Mybatis-中如何执行批处理？"><a href="#Q21-Mybatis-中如何执行批处理？" class="headerlink" title="Q21:  Mybatis 中如何执行批处理？"></a>Q21:  Mybatis 中如何执行批处理？</h3><blockquote><p>&emsp;&emsp;使用 <a href="http://blog.csdn.net/qq924862077/article/details/52641609" target="_blank" rel="noopener">BatchExecutor</a> 完成批处理。</p></blockquote><h3 id="Q22-Mybatis-都有哪些-Executor-执行器？它们之间的区别是什么？"><a href="#Q22-Mybatis-都有哪些-Executor-执行器？它们之间的区别是什么？" class="headerlink" title="Q22: Mybatis 都有哪些 Executor 执行器？它们之间的区别是什么？"></a>Q22: Mybatis 都有哪些 Executor 执行器？它们之间的区别是什么？</h3><blockquote><p>&emsp;&emsp;Mybatis有三种基本的Executor执行器，<code>SimpleExecutor</code>、<code>ReuseExecutor</code>、<code>BatchExecutor</code>。<br>&emsp;&emsp;<code>SimpleExecutor</code>：每执行一次 update 或 select，就开启一个Statement对象，用完立刻关闭 Statement 对象。<br>&emsp;&emsp;<code>ReuseExecutor</code>：执行 update 或 select，以 sql 作为 key 查找 Statement 对象，存在就使用，不存在就创建，用完后，不关闭 Statement 对象，而是放置于 Map<string, statement=""> 内，供下一次使用。简言之，就是重复使用 Statement 对象。<br>&emsp;&emsp;<code>BatchExecutor</code>：执行 update（没有 select，JDBC 批处理不支持select），将所有 sql 都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个 Statement 对象，每个 Statement 对象都是 addBatch() 完毕后，等待逐一执行 executeBatch() 批处理。与 JDBC 批处理相同。<br>&emsp;&emsp;作用范围：Executor 的这些特点，都严格限制在 SqlSession 生命周期范围内。</string,></p></blockquote><h3 id="Q23-Mybatis-中如何指定使用哪一种-Executor-执行器？"><a href="#Q23-Mybatis-中如何指定使用哪一种-Executor-执行器？" class="headerlink" title="Q23: Mybatis 中如何指定使用哪一种 Executor 执行器？"></a>Q23: Mybatis 中如何指定使用哪一种 Executor 执行器？</h3><blockquote><p>&emsp;&emsp;在 Mybatis 配置文件中，可以指定默认的<code>ExecutorType</code>执行器类型，也可以手动给<code>DefaultSqlSessionFactory</code>的创建<code>SqlSession</code>的方法传递<code>ExecutorType</code>类型参数。</p></blockquote><h3 id="Q24-Mybatis-是否可以映射Enum枚举类？"><a href="#Q24-Mybatis-是否可以映射Enum枚举类？" class="headerlink" title="Q24: Mybatis 是否可以映射Enum枚举类？"></a>Q24: Mybatis 是否可以映射<code>Enum</code>枚举类？</h3><blockquote><p>&emsp;&emsp;Mybatis 可以映射枚举类，不单可以映射枚举类，Mybatis 可以映射任何对象到表的一列上。映射方式为自定义一个 TypeHandler，实现 TypeHandler 的<code>setParameter()</code>和<code>getResult()</code>接口方法。TypeHandler 有两个作用，一是完成从<code>javaType</code>至<code>jdbcType</code>的转换，二是完成<code>jdbcType</code>至<code>javaType</code>的转换，体现为<code>setParameter()</code>和<code>getResult()</code>两个方法，分别代表设置 sql 问号占位符参数和获取列查询结果。</p></blockquote><h3 id="Q25-Mybatis-映射文件中，如果A标签通过include引用了B标签的内容，请问，B标签能否定义在A标签的后面，还是说必须定义在A标签的前面？"><a href="#Q25-Mybatis-映射文件中，如果A标签通过include引用了B标签的内容，请问，B标签能否定义在A标签的后面，还是说必须定义在A标签的前面？" class="headerlink" title="Q25: Mybatis 映射文件中，如果A标签通过include引用了B标签的内容，请问，B标签能否定义在A标签的后面，还是说必须定义在A标签的前面？"></a>Q25: Mybatis 映射文件中，如果A标签通过<code>include</code>引用了B标签的内容，请问，B标签能否定义在A标签的后面，还是说必须定义在A标签的前面？</h3><blockquote><p>&emsp;&emsp;虽然 Mybatis 解析 xml 映射文件是按照顺序解析的，但是，被引用的B标签依然可以定义在任何地方，Mybatis 都可以正确识别。<br>&emsp;&emsp;原理是：Mybatis 解析A标签，发现A标签引用了B标签，但是B标签尚未解析到，尚不存在，此时，Mybatis 会将A标签标记为未解析状态，然后继续解析余下的标签，包含B标签，待所有标签解析完毕，Mybatis 会重新解析那些被标记为未解析的标签，此时再解析A标签时，B标签已经存在，A标签也就可以正常解析完成了。</p></blockquote><h3 id="Q26-简述-Mybatis-的-xml-映射文件和-Mybatis-内部数据结构之间的映射关系？"><a href="#Q26-简述-Mybatis-的-xml-映射文件和-Mybatis-内部数据结构之间的映射关系？" class="headerlink" title="Q26: 简述 Mybatis 的 xml 映射文件和 Mybatis 内部数据结构之间的映射关系？"></a>Q26: 简述 Mybatis 的 xml 映射文件和 Mybatis 内部数据结构之间的映射关系？</h3><blockquote><p>&emsp;&emsp;Mybatis 将所有 xml 配置信息都封装到 All-In-One 重量级对象 Configuration 内部。在 xml 映射文件中，<code>&lt;parameterMap&gt;</code>标签会被解析为 ParameterMap 对象，其每个子元素会被解析为 ParameterMapping 对象。<code>&lt;resultMap&gt;</code>标签会被解析为 ResultMap 对象，其每个子元素会被解析为 ResultMapping 对象。每一个<code>&lt;select&gt;</code>、<code>&lt;insert&gt;</code>、<code>&lt;update&gt;</code>、<code>&lt;delete&gt;</code>标签均会被解析为 MappedStatement 对象，标签内的 sql 会被解析为 BoundSql 对象。</p></blockquote><h3 id="Q27-为什么说-Mybatis-是半自动ORM映射工具？它与全自动的区别在哪里？"><a href="#Q27-为什么说-Mybatis-是半自动ORM映射工具？它与全自动的区别在哪里？" class="headerlink" title="Q27: 为什么说 Mybatis 是半自动ORM映射工具？它与全自动的区别在哪里？"></a>Q27: 为什么说 Mybatis 是半自动<code>ORM</code>映射工具？它与全自动的区别在哪里？</h3><blockquote><p>&emsp;&emsp;Hibernate 属于全自动 ORM 映射工具，使用 Hibernate 查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的。而 Mybatis 在查询关联对象或关联集合对象时，需要手动编写 sql 来完成，所以，称之为半自动 <a href="https://baike.baidu.com/item/ORM/3583252?fr=aladdin" target="_blank" rel="noopener">ORM</a> 映射工具。</p></blockquote><h3 id="二、博文参考"><a href="#二、博文参考" class="headerlink" title="二、博文参考"></a>二、博文参考</h3><ul><li><a href="https://union-click.jd.com/jdc?d=7w4cYP" target="_blank" rel="noopener">《Mybatis 技术内幕》</a> — 徐郡明 著</li><li><a href="https://www.cnblogs.com/w1217/p/5541631.html" title="Mybatis执行插入并返回ID" target="_blank" rel="noopener">https://www.cnblogs.com/w1217/p/5541631.html</a></li><li><a href="https://my.oschina.net/zudajun/blog/747682" title="Mybatis原理+面试题" target="_blank" rel="noopener">https://my.oschina.net/zudajun/blog/747682</a></li><li><a href="http://blog.csdn.net/qzc711/article/details/49307055" title="Mybatis执行批处理" target="_blank" rel="noopener">http://blog.csdn.net/qzc711/article/details/49307055</a></li><li><a href="https://www.cnblogs.com/zsg88/p/7566039.html" title="Mybatis批处理之BatchExecutor" target="_blank" rel="noopener">https://www.cnblogs.com/zsg88/p/7566039.html</a></li><li><a href="https://www.cnblogs.com/itjcw/p/6206888.html" title="Mybatis分页之RowBounds/PageHelper" target="_blank" rel="noopener">https://www.cnblogs.com/itjcw/p/6206888.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://image.wumaozheng.com/blog/article/Mybatis-1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs（Plain Old Java Objects，普通的 Java对象）映射成数据库中的记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mybatis" scheme="https://wumaozheng.com/tags/Mybatis/"/>
    
      <category term="Q/A" scheme="https://wumaozheng.com/tags/Q-A/"/>
    
  </entry>
  
  <entry>
    <title>历史首人—詹姆斯30K+8K+8K里程碑</title>
    <link href="https://wumaozheng.com/2018/LeBron-James-20180228.html"/>
    <id>https://wumaozheng.com/2018/LeBron-James-20180228.html</id>
    <published>2018-02-28T00:25:40.000Z</published>
    <updated>2018-09-18T12:43:28.188Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.wumaozheng.com/blog/article/Lebron-1.jpg" alt="LeBron·James" title="LeBron·James"></p><p>&emsp;&emsp;北京时间2018年02月28日，<a href="http://nba.stats.qq.com/team/?id=cavaliers" target="_blank" rel="noopener">克利夫兰-骑士</a>（Cleveland Cavaliers）坐镇主场迎战 <a href="http://nba.stats.qq.com/team/?id=nets" target="_blank" rel="noopener">布鲁克林-篮网</a>（Brooklyn Nets），这场比赛被命名为 <a href="http://sports.qq.com/a/20180228/011679.htm" target="_blank" rel="noopener">“腾讯之夜”</a>，最终骑士129-123险胜对手。詹姆斯此役出战39分钟，25投13中得到31分12篮板11助攻拿到三双，生涯助攻数突破8000次，成为历史上首位拿到30000分+8000篮板+8000次助攻的球员。</p><a id="more"></a><p><img src="https://image.wumaozheng.com/blog/article/Lebron-2.jpg" alt=""></p><p>&emsp;&emsp;勒布朗砍下31分12篮板11助攻的三双，达成了二月场均三双（27分10.5篮板10.5助攻）的成就。<br><img src="https://image.wumaozheng.com/blog/article/Lebron-3.jpg" alt=""></p><p>&emsp;&emsp;他还凭借这次月场均三双，超越了<a href="https://baike.baidu.com/item/%E5%A8%81%E5%B0%94%E7%89%B9%C2%B7%E5%BC%A0%E4%BC%AF%E4%BC%A6/533368?fromtitle=%E5%BC%A0%E4%BC%AF%E4%BC%A6&amp;fromid=7130104" target="_blank" rel="noopener">威尔特-张伯伦</a>，成为史上年龄最大的能够达成月场均三双的球员。<br><img src="https://image.wumaozheng.com/blog/article/Lebron-4.jpg" alt="James-vs-Chamnerlain" title="James-vs-Chamnerlain"></p><p>&emsp;&emsp;勒布朗·詹姆斯本赛季已经拿到12次三双，上赛季的13次三双已经是他生涯的最高纪录，本赛季他要创造新的纪录也不是什么问题。<br><img src="https://image.wumaozheng.com/blog/article/Lebron-5.jpg" alt=""></p><p><img src="https://image.wumaozheng.com/blog/article/Lebron-6.jpg" alt=""></p><p>&emsp;&emsp;生涯助攻数达到8000里程碑。当比赛结束后，速贷球馆（骑士主场馆）现场球迷也不断呼喊着“MVP”来庆祝他这一成就。<br><img src="https://image.wumaozheng.com/blog/article/Lebron-7.jpg" alt="James-8000次助攻-2018-02-28" title="James-8000次助攻"></p><p><img src="https://image.wumaozheng.com/blog/article/Lebron-8.jpg" alt="詹老汉的第8000次助攻，30000+8000+8000历史首人！" title="詹老汉的第8000次助攻"></p><p>&emsp;&emsp;赛后詹姆斯更新Instagram写到：“这真是太不真实了！深知自己从联盟中的菜鸟打起，到现在完成了联盟此前从未有人做到的壮举，我一直梦想着成为这其中的一部分。WOW！！”<br><img src="https://image.wumaozheng.com/blog/article/Lebron-9.jpg" alt="这真是太不真实了！" title="KingJames-Instagram"></p><p>&emsp;&emsp;33岁的詹姆斯依旧在这个球场上展现着他让人恐怖的能力以及他的全面，而这其中更让人不可思议的是他竟然还在进步。当同龄人已经步入“养老”的行列的时候詹姆斯却还在创造着自己的一个又一个纪录，不愧为“天选之子”—詹皇，希望詹老汉一直健康的打下去，我们期待着你的 <a href="">40000PTS+10000REB+10000AST</a>，见证奇迹！<br><img src="https://image.wumaozheng.com/blog/article/Lebron-10.jpg" alt=""></p><p>&emsp;&emsp;本场首发球员：</p><ul><li>布鲁克林-篮网：丹吉洛-拉塞尔、丁威迪、克拉布、卡罗尔、贾莱特-阿伦</li><li>克利夫兰-骑士：勒布朗-詹姆斯、乔治-希尔、JR-史密斯、奥斯曼、特里斯坦-汤普森</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://image.wumaozheng.com/blog/article/Lebron-1.jpg&quot; alt=&quot;LeBron·James&quot; title=&quot;LeBron·James&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;北京时间2018年02月28日，&lt;a href=&quot;http://nba.stats.qq.com/team/?id=cavaliers&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;克利夫兰-骑士&lt;/a&gt;（Cleveland Cavaliers）坐镇主场迎战 &lt;a href=&quot;http://nba.stats.qq.com/team/?id=nets&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;布鲁克林-篮网&lt;/a&gt;（Brooklyn Nets），这场比赛被命名为 &lt;a href=&quot;http://sports.qq.com/a/20180228/011679.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;“腾讯之夜”&lt;/a&gt;，最终骑士129-123险胜对手。詹姆斯此役出战39分钟，25投13中得到31分12篮板11助攻拿到三双，生涯助攻数突破8000次，成为历史上首位拿到30000分+8000篮板+8000次助攻的球员。&lt;/p&gt;
    
    </summary>
    
    
      <category term="NBA" scheme="https://wumaozheng.com/tags/NBA/"/>
    
  </entry>
  
  <entry>
    <title>网站SEO优化</title>
    <link href="https://wumaozheng.com/2018/sitemap-seo.html"/>
    <id>https://wumaozheng.com/2018/sitemap-seo.html</id>
    <published>2018-02-27T14:48:45.000Z</published>
    <updated>2018-09-18T12:46:31.659Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.wumaozheng.com/blog/article/SEO.jpg" alt="SEO" title="Search Engine Optimization"></p><p>&emsp;&emsp;从上一篇随笔<a href="https://wumaozheng.com/2018/baidu-analysis.html">《网站流量统计分析》</a>了解到自己的博客网站访问量是少之又少啊！于是想到使用<code>SEO</code>优化一下。SEO：Search Engine Optimization，中文意译为“搜索引擎优化”。<code>SEO</code>是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。</p><a id="more"></a><h3 id="一、搜索引擎优化"><a href="#一、搜索引擎优化" class="headerlink" title="一、搜索引擎优化"></a>一、搜索引擎优化</h3><h4 id="1-内部优化"><a href="#1-内部优化" class="headerlink" title="1. 内部优化"></a>1. 内部优化</h4><p>　　（1）META标签优化：TITLE，KEYWORDS，DESCRIPTION等的优化<br>　　（2）内部链接优化：包括相关性链接（Tag标签），锚文本链接，各导航链接，及图片链接<br>　　（3）网站内容更新：每天保持站内的更新（主要是文章的更新等）</p><h4 id="2-外部优化"><a href="#2-外部优化" class="headerlink" title="2. 外部优化"></a>2. 外部优化</h4><p>　　（1）外部链接：博客、论坛、B2B、新闻、分类信息、贴吧、知道、百科、相关信息网等尽量保持链接的多样性<br>　　（2）外链运营：每天添加一定数量的外部链接，使关键词排名稳定提升<br>　　（3）外链选择：与一些和你网站相关性比较高，整体质量比较好的网站交换友情链接，巩固稳定关键词排名</p><h4 id="3-让百度收录你的站点"><a href="#3-让百度收录你的站点" class="headerlink" title="3. 让百度收录你的站点"></a>3. 让百度收录你的站点</h4><p>&emsp;&emsp;在搜索引擎中输入<code>site:你的域名</code>，如输入：<code>site:wumaozheng.com</code>，如果提示“很抱歉，没有找到与 <code>wumaozheng.com</code> 相关的网页”，就是说明我们的网站并没有被百度收录。我们可以直接点击下面的<code>网址提交</code>来提交我们的网站。<br>&emsp;&emsp;首先登录到 <a href="zhanzhang.baidu.com">百度站长平台</a>， 只要有百度旗下的账号就可以登录，登录成功之后在站点管理中点击添加网站然后输入你的站点地址，建议输入的网站以<code>www</code>开头的，例如：<code>www.wumaozheng.com</code>，不要输入<code>github.io</code>的网址，因为<code>Github</code>是不允许百度的<code>spider</code>爬取其上面的内容的，所以如果想让你的站点被百度收录，只能使用自己购买的域名。在选择完网站的类型之后需要验证网站的所有权，验证网站所有权的方式有三种：<code>文件验证</code>、<code>html标签验证</code>和<code>cname解析</code>验证，我使用的是<code>cname解析</code>验证，只需要在你的域名管理中添加一条解析即可。</p><h4 id="4-生成网站地图"><a href="#4-生成网站地图" class="headerlink" title="4. 生成网站地图"></a>4. 生成网站地图</h4><p>&emsp;&emsp;使用<code>npm</code>自动生成网站的<code>sitemap</code>，然后将生成的<code>sitemap</code>提交到百度和其他搜索引擎（Google、360等），执行命令如下：</p><blockquote><p>npm install hexo-generator-sitemap –save<br>npm install hexo-generator-baidu-sitemap –save</p></blockquote><p>或者：</p><blockquote><p>npm i hexo-generator-sitemap hexo-generator-baidu-sitemap -S</p></blockquote><p>&emsp;&emsp;<code>SEO</code>搜索引擎优化认为，网站的最佳结构是用户从首页点击三次就可以到达任何一个页面，但是我们使用 Hexo 编译的站点打开文章的 URL 是：<code>sitename/year/mounth/day/title/</code>四层的结构，这样的 URL 结构很不利于 SEO，爬虫就会经常爬不到我们的文章，于是，我们可以将 URL 直接改成<code>sitename/title</code>的形式，并且<code>title</code>最好是用英文，在根目录的配置文件下修改<code>permalink</code>如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">url: http://wumaozheng.com</span><br><span class="line">root: /</span><br><span class="line"># permalink: :year/:month/:day/:title/</span><br><span class="line">permalink: :title.html</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;重新部署博客，执行完之后就会在网站根目录生成<code>sitemap.xml</code>文件和<code>baidusitemap.xml</code>文件，可以通过 <a href="http://wumaozheng.com/sitemap.xml">http://wumaozheng.com/sitemap.xml</a> 进行访问查看。</p><blockquote><p>$ hexo g -d   // 若你也使用 Hexo，重新部署博客</p></blockquote><h4 id="5-向百度提交链接"><a href="#5-向百度提交链接" class="headerlink" title="5. 向百度提交链接"></a>5. 向百度提交链接</h4><p>&emsp;&emsp;<a href="https://ziyuan.baidu.com/linksubmit/index" target="_blank" rel="noopener">链接提交</a> 的方式分为<code>自动提交</code>和<code>手动提交</code>，<code>自动提交</code>又分为<em>主动推送</em>、<em>自动推送</em>和<em>sitemap</em>：</p><ul><li><code>主动推送</code>：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。</li><li><code>自动推送</code>：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。</li><li><code>sitemap</code>：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。</li><li><code>手动提交</code>：一次性提交链接给百度，可以使用此种方式。</li></ul><p>&emsp;&emsp;我所使用的是<code>sitemap</code>方式提交，直接将<code>www.wumaozheng.com/sitemap.xml</code>、<code>www.wumaozheng.com/baidusitemap.xml</code>两条记录提交到百度收录即可。</p><h3 id="二、参考文章"><a href="#二、参考文章" class="headerlink" title="二、参考文章"></a>二、参考文章</h3><ul><li>sunshine小小倩 - <a href="https://juejin.im/post/590b451a0ce46300588c43a0" target="_blank" rel="noopener">《Hexo高阶教程》</a> - 掘金</li><li>博客 - <a href="cherryblog.site/">cherryblog.site</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://image.wumaozheng.com/blog/article/SEO.jpg&quot; alt=&quot;SEO&quot; title=&quot;Search Engine Optimization&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;从上一篇随笔&lt;a href=&quot;https://wumaozheng.com/2018/baidu-analysis.html&quot;&gt;《网站流量统计分析》&lt;/a&gt;了解到自己的博客网站访问量是少之又少啊！于是想到使用&lt;code&gt;SEO&lt;/code&gt;优化一下。SEO：Search Engine Optimization，中文意译为“搜索引擎优化”。&lt;code&gt;SEO&lt;/code&gt;是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://wumaozheng.com/tags/Hexo/"/>
    
      <category term="Blog" scheme="https://wumaozheng.com/tags/Blog/"/>
    
      <category term="SEO" scheme="https://wumaozheng.com/tags/SEO/"/>
    
  </entry>
  
  <entry>
    <title>网站流量统计分析</title>
    <link href="https://wumaozheng.com/2018/baidu-analysis.html"/>
    <id>https://wumaozheng.com/2018/baidu-analysis.html</id>
    <published>2018-02-25T15:35:15.000Z</published>
    <updated>2018-09-18T12:46:57.098Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.wumaozheng.com/blog/article/analysis.jpg" alt="Statistics&amp;Analysis" title="Website Traffic Statistics And Analysis"></p><p>&emsp;&emsp;前段时间搭建了自己的博客网站 <a href="http://wumaozheng.com/">Mauger`s Blog</a>，于是开始在上面写一些随笔，记录自己在平时开发过程中踩到的坑和总结的一些小知识点。同时也希望能与同行朋友们一起交流讨论，那么到底有没有人访问过我的博客呢？</p><a id="more"></a><h3 id="一、统计网站访问量"><a href="#一、统计网站访问量" class="headerlink" title="一、统计网站访问量"></a>一、统计网站访问量</h3><h4 id="1-代码获取"><a href="#1-代码获取" class="headerlink" title="1. 代码获取"></a>1. 代码获取</h4><p>&emsp;&emsp;带着疑问我找到了 <a href="https://tongji.baidu.com/web/25190285/homepage/index" target="_blank" rel="noopener">百度统计</a>、<a href="http://www.cnzz.com/o_index.php" target="_blank" rel="noopener">CNZZ</a> 和 <a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子</a>，最终我结合<code>百度统计</code>和<code>不蒜子</code>一同使用。使用百度统计是因为其功能强大全面、使用方便，但是不能实时地在博客网站中展示；使用不蒜子是因为其能够在博客中实时地去展示、使用方便，能够统计文章阅读量、总的访客人数和总的访问次数，且可以自定义样式。<br>&emsp;&emsp;首先需要 <a href="https://u.baidu.com/ucweb/?module=Reguser&amp;controller=reg&amp;action=index&amp;appid=12&amp;nexturl=https%3A%2F%2Ftongji.baidu.com%2Fweb%2Fwelcome%2Flogin%3FloginDialog%3D1" target="_blank" rel="noopener">注册站长账号</a>，接着添加自己购买的网站域名，点击 <a href="https://tongji.baidu.com/sc-web/25190285/home/site/getjs?siteId=11721708" target="_blank" rel="noopener">代码获取</a> 后可以看到如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> _hmt = _hmt || [];</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hm = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">  hm.src = <span class="string">"https://hm.baidu.com/hm.js?XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"</span>;</span><br><span class="line">  <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>]; </span><br><span class="line">  s.parentNode.insertBefore(hm, s);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-代码安装"><a href="#2-代码安装" class="headerlink" title="2. 代码安装"></a>2. 代码安装</h4><ul><li>请将代码添加到网站全部页面的标签前。</li><li>建议在header.htm类似的页头模板页面中安装，以达到一处安装，全站皆有的效果。</li><li>如需在JS文件中调用统计分析代码，请直接去掉以下代码首尾的<code>&lt;script type=&quot;text/javascript&quot;&gt;</code>与<code>&lt;/script&gt;</code>后，放入JS文件中即可。</li></ul><h4 id="3-安装“不蒜子”"><a href="#3-安装“不蒜子”" class="headerlink" title="3. 安装“不蒜子”"></a>3. 安装“不蒜子”</h4><p>&emsp;&emsp;由于使用<code>百度统计</code>需要登陆到后台才能查看统计的数据分析，不能够实时的为我所用，且无法在博客网站中展示，所以在这里我用到了<code>不蒜子</code>。不蒜子与百度统计、谷歌分析等有区别：不蒜子可直接将访问次数显示在您在网页上（也可不显示）；对于已经上线一段时间的网站，不蒜子允许您初始化首次数据。<br>&emsp;&emsp;<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子</a> 可以给任何类型的个人站点使用，如果你是用的<code>HEXO</code>，打开<code>themes/</code>你的主题<code>/layout/_partial/footer.ejs</code>添加上述脚本即可，当然你也可以添加到<code>header</code>中。要使用不蒜子必须在页面中引入<code>busuanzi.js</code>，目前最新版如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-显示站点总访问量"><a href="#4-显示站点总访问量" class="headerlink" title="4. 显示站点总访问量"></a>4. 显示站点总访问量</h4><p>&emsp;&emsp;要显示站点总访问量，复制以下代码添加到你需要显示的位置。有两种算法可选：</p><ul><li><p>算法a：pv的方式，单个用户连续点击n篇文章，记录n次访问量。</p><figure class="highlight htmlbars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id="busuanzi_container_site_pv"&gt;</span><br><span class="line">    本站总访问量&lt;span id="busuanzi_value_site_pv"&gt;&lt;/span&gt;次</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure></li><li><p>算法b：uv的方式，单个用户连续点击n篇文章，只记录1次访客数。</p><figure class="highlight htmlbars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id="busuanzi_container_site_uv"&gt;</span><br><span class="line">  本站访客数&lt;span id="busuanzi_value_site_uv"&gt;&lt;/span&gt;人次</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="二、参考文章"><a href="#二、参考文章" class="headerlink" title="二、参考文章"></a>二、参考文章</h3><ul><li><a href="https://jingyan.baidu.com/article/db55b609d5b8554ba20a2f7a.html" target="_blank" rel="noopener">《如何使用百度统计代码》</a></li><li>不如 - <a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">《不蒜子》</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://image.wumaozheng.com/blog/article/analysis.jpg&quot; alt=&quot;Statistics&amp;amp;Analysis&quot; title=&quot;Website Traffic Statistics And Analysis&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;前段时间搭建了自己的博客网站 &lt;a href=&quot;http://wumaozheng.com/&quot;&gt;Mauger`s Blog&lt;/a&gt;，于是开始在上面写一些随笔，记录自己在平时开发过程中踩到的坑和总结的一些小知识点。同时也希望能与同行朋友们一起交流讨论，那么到底有没有人访问过我的博客呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://wumaozheng.com/tags/Hexo/"/>
    
      <category term="Blog" scheme="https://wumaozheng.com/tags/Blog/"/>
    
      <category term="流量统计" scheme="https://wumaozheng.com/tags/%E6%B5%81%E9%87%8F%E7%BB%9F%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>NBA2018全明星赛</title>
    <link href="https://wumaozheng.com/2018/LeBron-James-20180219.html"/>
    <id>https://wumaozheng.com/2018/LeBron-James-20180219.html</id>
    <published>2018-02-19T01:00:00.000Z</published>
    <updated>2018-09-18T12:51:55.833Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="0" width="640" height="498" src="https://v.qq.com/iframe/player.html?vid=y0025dgkdvx&tiny=0&auto=0" allowfullscreen></iframe><p>&emsp;&emsp;北京时间2018年02月19日，2018 NBA全明星正赛在 <a href="https://baike.baidu.com/item/%E6%96%AF%E5%8F%B0%E6%99%AE%E6%96%AF%E7%90%83%E9%A6%86/6503751?fr=aladdin" target="_blank" rel="noopener">洛杉矶斯台普斯中心</a> 举办，勒布朗-詹姆斯队以 <code>148-145</code> 逆转斯蒂芬-库里队。詹姆斯全场狂砍<code>29分10篮板8助攻</code>，其中得分和篮板均是全队最高，当选本届全明星赛MVP，这是他的第三个AMVP（全明星最有价值球员）。<a href="http://sports.qq.com/kbsweb/game.htm?mid=100000:1471476&amp;replay=1" target="_blank" rel="noopener">【视频回放】</a></p><a id="more"></a><p><img src="https://image.wumaozheng.com/blog/article/all-star-1.jpg" alt="勒布朗-詹姆斯队 VS 斯蒂芬-库里队" title="James Team VS Curry Team"></p><p><img src="https://image.wumaozheng.com/blog/article/all-star-2.jpg" alt="NBA2018全明星赛 - 勒布朗·詹姆斯斩获AMVP" title="詹姆斯荣获AMVP"></p><p>&emsp;&emsp;在本场比赛中，詹姆斯砍下29分10篮板8助攻，第3次获得全明星MVP，比肩“大O”奥斯卡·罗伯特森和乔丹，仅次于科比·布莱恩特和鲍勃·佩蒂特（同为4次），杜兰特得到19分6篮板5助攻3抢断1盖帽。库里贡献11分6篮板5助攻，德罗赞砍下21分6篮板2抢断，利拉德贡献21分。</p><p><img src="https://image.wumaozheng.com/blog/article/all-star-3.jpg" alt="东部詹姆斯队阵容" title="詹姆斯队"></p><h5 id="詹姆斯队-东部-首发："><a href="#詹姆斯队-东部-首发：" class="headerlink" title="詹姆斯队(东部)首发："></a>詹姆斯队(东部)首发：</h5><ul><li><a href="http://nba.stats.qq.com/player/?id=3704" target="_blank" rel="noopener">勒布朗·詹姆斯(詹皇)</a>（队长）</li><li><a href="http://nba.stats.qq.com/player/?id=4244" target="_blank" rel="noopener">凯文·杜兰特(KD)</a></li><li><a href="http://nba.stats.qq.com/player/?id=4840" target="_blank" rel="noopener">凯里·欧文(德鲁大叔)</a></li><li><a href="http://nba.stats.qq.com/player/?id=5007" target="_blank" rel="noopener">安东尼·戴维斯(浓眉哥)</a></li><li><a href="http://nba.stats.qq.com/player/?id=4390" target="_blank" rel="noopener">拉塞尔·威斯布鲁克(韦少)</a></li></ul><h5 id="詹姆斯队-东部-替补："><a href="#詹姆斯队-东部-替补：" class="headerlink" title="詹姆斯队(东部)替补："></a>詹姆斯队(东部)替补：</h5><ul><li><a href="http://nba.stats.qq.com/player/?id=4725" target="_blank" rel="noopener">保罗·乔治(泡椒)</a></li><li><a href="http://nba.stats.qq.com/player/?id=5153" target="_blank" rel="noopener">维克多·奥拉迪波</a></li><li><a href="http://nba.stats.qq.com/player/?id=4152" target="_blank" rel="noopener">凯尔·洛瑞</a></li><li><a href="http://nba.stats.qq.com/player/?id=5009" target="_blank" rel="noopener">布拉德利·比尔</a></li><li><a href="http://nba.stats.qq.com/player/?id=4890" target="_blank" rel="noopener">肯巴·沃克</a></li><li><a href="http://nba.stats.qq.com/player/?id=4507" target="_blank" rel="noopener">戈兰·德拉季奇</a></li><li><a href="http://nba.stats.qq.com/player/?id=5015" target="_blank" rel="noopener">安德鲁·德拉蒙德(庄神)</a></li><li><a href="http://nba.stats.qq.com/player/?id=4130" target="_blank" rel="noopener">拉马库斯·阿尔德里奇</a></li><li><a href="http://nba.stats.qq.com/player/?id=4391" target="_blank" rel="noopener">凯文·乐福</a>（受伤缺席，由 <a href="http://nba.stats.qq.com/player/?id=4507" target="_blank" rel="noopener">戈兰·德拉季奇</a> 顶替）</li><li><a href="http://nba.stats.qq.com/player/?id=4716" target="_blank" rel="noopener">约翰·沃尔</a>（受伤缺席，由 <a href="http://nba.stats.qq.com/player/?id=5015" target="_blank" rel="noopener">安德鲁·德拉蒙德(庄神)</a> 顶替）</li><li><a href="http://nba.stats.qq.com/player/?id=5544" target="_blank" rel="noopener">克里斯塔普斯·波尔津吉斯(波神)</a>（受伤缺席，由 <a href="http://nba.stats.qq.com/player/?id=4890" target="_blank" rel="noopener">肯巴·沃克</a> 顶替）</li><li><a href="http://nba.stats.qq.com/team/?type=player&amp;id=4720" target="_blank" rel="noopener">德马库斯·考辛斯(考神)</a>（受伤缺席，由 <a href="http://nba.stats.qq.com/player/?id=4725" target="_blank" rel="noopener">保罗·乔治(泡椒)</a> 顶替）</li></ul><p><img src="https://image.wumaozheng.com/blog/article/all-star-4.jpg" alt="西部库里队阵容" title="库里队"></p><h5 id="库里队-西部-首发："><a href="#库里队-西部-首发：" class="headerlink" title="库里队(西部)首发："></a>库里队(西部)首发：</h5><ul><li><a href="http://nba.stats.qq.com/player/?id=4614" target="_blank" rel="noopener">德玛尔·德罗赞</a></li><li><a href="http://nba.stats.qq.com/player/?id=5294" target="_blank" rel="noopener">乔尔·恩比德(大帝)</a></li><li><a href="http://nba.stats.qq.com/player/?id=5185" target="_blank" rel="noopener">扬尼斯·阿德托昆博(字母哥)</a></li><li><a href="http://nba.stats.qq.com/player/?id=4563" target="_blank" rel="noopener">詹姆斯·哈登(登哥)</a></li><li><a href="http://nba.stats.qq.com/player/?id=4612" target="_blank" rel="noopener">斯蒂芬·库里(萌神)</a>（队长）</li></ul><h5 id="库里队-西部-替补："><a href="#库里队-西部-替补：" class="headerlink" title="库里队(西部)替补："></a>库里队(西部)替补：</h5><ul><li><a href="http://nba.stats.qq.com/team/?type=player&amp;id=5012" target="_blank" rel="noopener">达米安·利拉德</a></li><li><a href="http://nba.stats.qq.com/team/?type=player&amp;id=5546" target="_blank" rel="noopener">卡尔·安东尼·唐斯</a></li><li><a href="http://nba.stats.qq.com/player/?id=4892" target="_blank" rel="noopener">克莱·汤普森(汤神)</a></li><li><a href="http://nba.stats.qq.com/player/?id=4245" target="_blank" rel="noopener">艾尔·霍福德</a></li><li><a href="http://nba.stats.qq.com/player/?id=4152" target="_blank" rel="noopener">凯尔·洛瑞</a></li><li><a href="http://nba.stats.qq.com/player/?id=5069" target="_blank" rel="noopener">德雷蒙德·格林(追梦)</a></li><li><a href="http://nba.stats.qq.com/player/?id=4912" target="_blank" rel="noopener">吉米·巴特勒</a></li></ul><p><img src="https://image.wumaozheng.com/blog/article/all-star-5.jpg" alt="詹皇战斧劈扣，势不可挡！" title="詹皇战斧劈扣"></p><h5 id="emsp-emsp-加油老詹，长路漫漫，唯皇做伴！"><a href="#emsp-emsp-加油老詹，长路漫漫，唯皇做伴！" class="headerlink" title="&emsp;&emsp;加油老詹，长路漫漫，唯皇做伴！"></a>&emsp;&emsp;加油老詹，长路漫漫，唯皇做伴！</h5>]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;0&quot; width=&quot;640&quot; height=&quot;498&quot; src=&quot;https://v.qq.com/iframe/player.html?vid=y0025dgkdvx&amp;tiny=0&amp;auto=0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;北京时间2018年02月19日，2018 NBA全明星正赛在 &lt;a href=&quot;https://baike.baidu.com/item/%E6%96%AF%E5%8F%B0%E6%99%AE%E6%96%AF%E7%90%83%E9%A6%86/6503751?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛杉矶斯台普斯中心&lt;/a&gt; 举办，勒布朗-詹姆斯队以 &lt;code&gt;148-145&lt;/code&gt; 逆转斯蒂芬-库里队。詹姆斯全场狂砍&lt;code&gt;29分10篮板8助攻&lt;/code&gt;，其中得分和篮板均是全队最高，当选本届全明星赛MVP，这是他的第三个AMVP（全明星最有价值球员）。&lt;a href=&quot;http://sports.qq.com/kbsweb/game.htm?mid=100000:1471476&amp;amp;replay=1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;【视频回放】&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="NBA" scheme="https://wumaozheng.com/tags/NBA/"/>
    
  </entry>
  
  <entry>
    <title>詹皇三双后仰绝杀森林狼</title>
    <link href="https://wumaozheng.com/2018/LeBron-James-20180209.html"/>
    <id>https://wumaozheng.com/2018/LeBron-James-20180209.html</id>
    <published>2018-02-08T06:37:25.000Z</published>
    <updated>2018-04-18T13:55:42.143Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="0" width="640" height="498" src="https://v.qq.com/iframe/player.html?vid=q0025zrmhkw&tiny=0&auto=0" allowfullscreen></iframe><p>&emsp; &emsp; 北京时间2018年02月08日，NBA常规赛继续进行，骑士在主场迎战森林狼。凭借勒布朗·詹姆斯的压哨绝杀拿到三双37＋10＋15，骑士苦战加时赛以140-138击败森林狼，报了此前在客场负于对手的一箭之仇，骑士结束两连败。<a href="http://kbs.sports.qq.com/kbsweb/game.htm?mid=100000:1471356&amp;replay=1" target="_blank" rel="noopener">【NBA集锦】</a></p><a id="more"></a><h5 id="双方本场首发球员："><a href="#双方本场首发球员：" class="headerlink" title="双方本场首发球员："></a>双方本场首发球员：</h5><ul><li>克利夫兰-骑士：勒布朗·詹姆斯、克劳德、JR·史密斯、小托马斯、特里斯坦-汤普森</li><li>明尼苏达-森林狼：巴特勒、唐斯、维金斯、蒂格、吉布森</li></ul><h5 id="双方本场替补球员："><a href="#双方本场替补球员：" class="headerlink" title="双方本场替补球员："></a>双方本场替补球员：</h5><ul><li>克利夫兰-骑士：科沃尔、杰夫·格林、奥斯曼、弗莱、罗斯</li><li>明尼苏达-森林狼：克劳福德、吉昂、别利察、琼斯</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;0&quot; width=&quot;640&quot; height=&quot;498&quot; src=&quot;https://v.qq.com/iframe/player.html?vid=q0025zrmhkw&amp;tiny=0&amp;auto=0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&amp;emsp; &amp;emsp; 北京时间2018年02月08日，NBA常规赛继续进行，骑士在主场迎战森林狼。凭借勒布朗·詹姆斯的压哨绝杀拿到三双37＋10＋15，骑士苦战加时赛以140-138击败森林狼，报了此前在客场负于对手的一箭之仇，骑士结束两连败。&lt;a href=&quot;http://kbs.sports.qq.com/kbsweb/game.htm?mid=100000:1471356&amp;amp;replay=1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;【NBA集锦】&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="NBA" scheme="https://wumaozheng.com/tags/NBA/"/>
    
  </entry>
  
  <entry>
    <title>Music-成都</title>
    <link href="https://wumaozheng.com/2018/music-chengdu.html"/>
    <id>https://wumaozheng.com/2018/music-chengdu.html</id>
    <published>2018-01-29T15:30:25.000Z</published>
    <updated>2018-01-30T02:36:22.190Z</updated>
    
    <content type="html"><![CDATA[<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=436514312&auto=0&height=66"></iframe><br><a id="more"></a></p><div style="text-align: center"><br><p style="color: #8B0000;">作曲 : 赵雷<br>作词 : 赵雷<br>所属专辑：成都</p><p style="color: #000000;">让我掉下眼泪的 不止昨夜的酒<br>让我依依不舍的 不止你的温柔<br>余路还要走多久 你攥着我的手<br>让我感到为难的 是挣扎的自由<br><br>分别总是在九月 回忆是思念的愁<br>深秋嫩绿的垂柳 亲吻着我额头<br>在那座阴雨的小城里 我从未忘记你<br>成都 带不走的 只有你<br><br>和我在成都的街头走一走<br>直到所有的灯都熄灭了也不停留<br>你会挽着我的衣袖 我会把手揣进裤兜<br>走到玉林路的尽头 坐在(走过)小酒馆的门口<br><br>分别总是在九月 回忆是思念的愁<br>深秋嫩绿的垂柳 亲吻着我额头<br>在那座阴雨的小城里 我从未忘记你<br>成都 带不走的 只有你<br>和我在成都的街头走一走<br>直到所有的灯都熄灭了也不停留<br>你会挽着我的衣袖 我会把手揣进裤兜<br>走到玉林路的尽头 坐在(走过)小酒馆的门口<br>和我在成都的街头走一走<br>直到所有的灯都熄灭了也不停留<br>和我在成都的街头走一走<br>直到所有的灯都熄灭了也不停留<br>你会挽着我的衣袖 我会把手揣进裤兜<br>走到玉林路的尽头 坐在(走过)小酒馆的门口<br><br>和我在成都的街头走一走<br>直到所有的灯都熄灭了也不停留</p><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=436514312&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Music" scheme="https://wumaozheng.com/tags/Music/"/>
    
      <category term="Freetime" scheme="https://wumaozheng.com/tags/Freetime/"/>
    
  </entry>
  
  <entry>
    <title>Music-广东十年爱情故事</title>
    <link href="https://wumaozheng.com/2018/music-gdsnaqgs.html"/>
    <id>https://wumaozheng.com/2018/music-gdsnaqgs.html</id>
    <published>2018-01-27T15:45:25.000Z</published>
    <updated>2018-01-29T05:55:20.989Z</updated>
    
    <content type="html"><![CDATA[<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=513791211&auto=0&height=66"></iframe><br><a id="more"></a></p><div style="text-align: center"><br><p style="color: #8B0000;">作曲 : 广东雨神<br>作词 :  广东雨神<br>所属专辑：《广东十年爱情故事》</p><p style="color: #000000;">安静地离去<br>和孤单一起<br>拥挤的回忆<br>时间抹去<br>人在广东已经漂泊十年<br>有时也怀念当初一起 经已改变<br>让这天空将你我相连 怀念你<br>走了云的天空还任性<br>是否它相信在乎反而容易放弃<br>非要最后一无所有 才无所畏惧</p><p style="color: darkgreen;">对白：我知道好多时候爱一个人系冇任何理由嘅<br>你同其他女仔唔一样嘅就系<br>你从来都唔问我钟意你D乜<br>反而我成日都问你，你究竟钟意我D乜</p><p style="color: #000000;">笑的多一些<br>改变要彻底<br>直面这世界<br>真假游戏<br>人在广东已经漂泊十年<br>有时也怀念当初一起 经已改变<br>让这天空将你我相连 怀念你<br>走了云的天空还任性<br>是否它相信下一次的相遇<br>就算最后一无所有 也无所畏惧<br>相信你<br>就如当初一起 行过广东这十年<br>幸福走了 唏嘘感慨那当初<br>相信你<br>哪怕坚强是假装出勇敢的面具<br>也不能少<br>活得精彩的勇气<br>人在广东已经漂泊十年<br>有时也怀念当初一起 经已改变<br>让这天空将你我相连 怀念你<br>走了云的天空还任性<br>是否它相信下一次的相遇<br>就算最后一无所有 也无所畏惧</p><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=513791211&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Music" scheme="https://wumaozheng.com/tags/Music/"/>
    
      <category term="Freetime" scheme="https://wumaozheng.com/tags/Freetime/"/>
    
  </entry>
  
  <entry>
    <title>NBA历史上最年轻的30,000分先生</title>
    <link href="https://wumaozheng.com/2018/LeBron-James-20180124.html"/>
    <id>https://wumaozheng.com/2018/LeBron-James-20180124.html</id>
    <published>2018-01-24T14:45:45.000Z</published>
    <updated>2018-09-18T13:02:40.911Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.wumaozheng.com/blog/article/James-1.jpg" alt="LeBron·James" title="LeBron·James"></p><p>&emsp;&emsp;北京时间2018年01月24日，<a href="http://nba.stats.qq.com/team/?id=cavaliers" target="_blank" rel="noopener">克利夫兰-骑士</a>（Cleveland Cavaliers）客场挑战<a href="http://nba.stats.qq.com/team/?id=spurs" target="_blank" rel="noopener">圣安东尼奥-马刺</a>（San Antonio Spurs）。此前詹姆斯距离3万分大关还有7分，在今天的比赛中，詹姆斯第一节没有很强的进攻欲望，最后几分钟叫了个暂停之后，詹姆斯加强了个人单打进攻，但是两罚不中，三分打铁，一度以为3万分还要等个几分钟。但在第一节的最后一攻，詹姆斯面对丹尼-格林的防守，强行命中了一记中投。这球之后，詹姆斯正式跨入3万分俱乐部，也成为了历史上最年轻的3万分先生，达成30,000分里程碑。<a id="more"></a></p><p><img src="https://image.wumaozheng.com/blog/article/James-2.gif" alt="King James center"></p><p>&emsp;&emsp;第一节的最后一攻。</p><p><img src="https://image.wumaozheng.com/blog/article/James-3.jpg" alt="詹姆斯强行跳投命中"></p><p>&emsp;&emsp;强行跳投命中，来到30,001分。</p><p><img src="https://image.wumaozheng.com/blog/article/James-4.jpg" alt="实力詹的30000分"></p><p>&emsp;&emsp;2003年10月30日，詹姆斯初登NBA舞台，在全世界的瞩目下，用一记跳投拿到了生涯首分，时隔5200天，他拿到了生涯第30000分，数据见证了詹姆斯的成长之路，但伟大却无法被量化。</p><p><img src="https://image.wumaozheng.com/blog/article/James-5.jpg" alt="詹韦" title="詹姆斯&amp;韦德"></p><p>&emsp;&emsp;不是得分手的勒布朗·詹姆斯，却展现着不可思议的得分能力，更何况詹韦又重聚在一起了。三万分到来时，詹姆斯立马和德怀恩·韦德（Dwyane Wade）拥抱在一起，他们的情义远远大于篮球。</p><p><img src="https://image.wumaozheng.com/blog/article/James-6.jpg" alt="詹皇"></p><p>&emsp;&emsp;截至2018年1月24日，勒布朗·詹姆斯总共获得3个总冠军，3次FMVP（Finals Most Valuable Player 总决赛最有价值球员）。分别是：</p><ul><li>2012年，詹姆斯得到NBA个人生涯的第3座常规赛MVP，第1个总冠军和 FMVP。</li><li>2013年，詹姆斯获得第4个常规赛MVP、第2个NBA总冠军和第2个 FMVP，实现两连冠。</li><li>2016年，詹姆斯带领骑士逆转战胜卫冕冠军勇士获得队史首个总冠军和个人第3个 FMVP。</li></ul><p><img src="https://image.wumaozheng.com/blog/article/James-7.jpg" alt="3万分先生"></p><p>&emsp;&emsp;克利夫兰骑士 - 勒布朗·詹姆斯。</p><p>&emsp;&emsp;让我们一起去见证NBA历史上最年轻30,000分先生的诞生…</p><p><img src="https://image.wumaozheng.com/blog/article/James-8.jpg" alt="KingJames"></p><p>&emsp;&emsp;若有和我同样喜欢勒布朗·詹姆斯（LeBron James）和科比·布莱恩特（Kobe Bryant）的詹密、科密朋友们，在这里向大家推荐一档我个人比较喜欢的知乎专栏：</p><ul><li><a href="https://zhuanlan.zhihu.com/c_131346426" target="_blank" rel="noopener">一才的篮球</a> —— 篮球的道路上，不变的是热爱。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://image.wumaozheng.com/blog/article/James-1.jpg&quot; alt=&quot;LeBron·James&quot; title=&quot;LeBron·James&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;北京时间2018年01月24日，&lt;a href=&quot;http://nba.stats.qq.com/team/?id=cavaliers&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;克利夫兰-骑士&lt;/a&gt;（Cleveland Cavaliers）客场挑战&lt;a href=&quot;http://nba.stats.qq.com/team/?id=spurs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;圣安东尼奥-马刺&lt;/a&gt;（San Antonio Spurs）。此前詹姆斯距离3万分大关还有7分，在今天的比赛中，詹姆斯第一节没有很强的进攻欲望，最后几分钟叫了个暂停之后，詹姆斯加强了个人单打进攻，但是两罚不中，三分打铁，一度以为3万分还要等个几分钟。但在第一节的最后一攻，詹姆斯面对丹尼-格林的防守，强行命中了一记中投。这球之后，詹姆斯正式跨入3万分俱乐部，也成为了历史上最年轻的3万分先生，达成30,000分里程碑。
    
    </summary>
    
    
      <category term="NBA" scheme="https://wumaozheng.com/tags/NBA/"/>
    
  </entry>
  
  <entry>
    <title>When you`re lost and confused</title>
    <link href="https://wumaozheng.com/2018/lost-and-confused.html"/>
    <id>https://wumaozheng.com/2018/lost-and-confused.html</id>
    <published>2018-01-22T15:43:15.000Z</published>
    <updated>2018-09-18T13:00:06.564Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.wumaozheng.com/blog/article/Steve-Jobs.jpg" alt="Steve Jobs" title="乔布斯"></p><p>&emsp;&emsp;Your time is limited, so don’t waste it living someone else’s life. Don’t be trapped by dogma – which is living with the results of other people’s thinking. Don’t let the noise of other’s opinions drown out your own inner voice. And most important, have the courage to follow your heart and intuition. They somehow<br>already know what you truly want to become. Everything else is secondary. —— Steve Jobs</p><a id="more"></a><blockquote><p>&emsp;&emsp;你的时间是有限的，所以不要把它浪费在别人的生活中。 不要被教条所束缚 - 这与他人思维的结果是一致的。 不要让别人的意见的噪音淹没你自己的内心的声音。 最重要的是，有勇气跟随你的内心和直觉。 他们以某种方式已经知道你真正想成为什么。 其他一切都是次要的。—— 史蒂夫·乔布斯</p></blockquote><p>附上视频链接：<a href="http://open.163.com/movie/2006/8/3/8/M7BC8JMHJ_M7BC8PA38.html" title="乔布斯-斯坦福大学演讲" target="_blank" rel="noopener">乔布斯-斯坦福大学演讲</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://image.wumaozheng.com/blog/article/Steve-Jobs.jpg&quot; alt=&quot;Steve Jobs&quot; title=&quot;乔布斯&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;Your time is limited, so don’t waste it living someone else’s life. Don’t be trapped by dogma – which is living with the results of other people’s thinking. Don’t let the noise of other’s opinions drown out your own inner voice. And most important, have the courage to follow your heart and intuition. They somehow&lt;br&gt;already know what you truly want to become. Everything else is secondary. —— Steve Jobs&lt;/p&gt;
    
    </summary>
    
    
      <category term="Notes" scheme="https://wumaozheng.com/tags/Notes/"/>
    
      <category term="Thinking" scheme="https://wumaozheng.com/tags/Thinking/"/>
    
  </entry>
  
  <entry>
    <title>Markdown基础语法及编辑器简介</title>
    <link href="https://wumaozheng.com/2017/markdown-introduction.html"/>
    <id>https://wumaozheng.com/2017/markdown-introduction.html</id>
    <published>2017-12-26T04:57:00.000Z</published>
    <updated>2018-09-18T13:13:49.434Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.wumaozheng.com/blog/article/Markdown.jpg" alt="Markdown&amp;Tools" title="Markdown&amp;Tools"></p><h3 id="Markdown-简介"><a href="#Markdown-简介" class="headerlink" title="Markdown 简介"></a>Markdown 简介</h3><p>&emsp;&emsp;Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档。特点：<code>轻量、简单、通用、易读易写</code>。感觉在 <a href="https://www.jianshu.com/p/6601be24bdd6" target="_blank" rel="noopener">简书</a> 中展示要好得多！<a id="more"></a></p><h3 id="Markdown-基础语法"><a href="#Markdown-基础语法" class="headerlink" title="Markdown 基础语法"></a>Markdown 基础语法</h3><h4 id="1-标题"><a href="#1-标题" class="headerlink" title="1.  标题"></a>1.  标题</h4><p>&emsp;&emsp;标题能显示出文章的结构。行首插入1-6个<code>#</code>，每增加一个<code>#</code>表示更深入层次的内容，对应到标题的深度由 1-6 阶。或者在标题底下加上<code>==</code>或多个成为一级标题，在标题底下加上<code>---</code>或多个成为二级标题。例如：</p><blockquote><h1 id="一级标题（-一级标题）"><a href="#一级标题（-一级标题）" class="headerlink" title="一级标题（# 一级标题）"></a>一级标题（# 一级标题）</h1><h2 id="二级标题（-二级标题）"><a href="#二级标题（-二级标题）" class="headerlink" title="二级标题（## 二级标题）"></a>二级标题（## 二级标题）</h2><h3 id="三级标题（-三级标题）"><a href="#三级标题（-三级标题）" class="headerlink" title="三级标题（### 三级标题）"></a>三级标题（### 三级标题）</h3><h4 id="四级标题（-四级标题）"><a href="#四级标题（-四级标题）" class="headerlink" title="四级标题（#### 四级标题）"></a>四级标题（#### 四级标题）</h4><h5 id="五级标题（-五级标题）"><a href="#五级标题（-五级标题）" class="headerlink" title="五级标题（##### 五级标题）"></a>五级标题（##### 五级标题）</h5><h6 id="六级标题（-六级标题）"><a href="#六级标题（-六级标题）" class="headerlink" title="六级标题（###### 六级标题）"></a>六级标题（###### 六级标题）</h6></blockquote><h4 id="2-文本"><a href="#2-文本" class="headerlink" title="2.  文本"></a>2.  文本</h4><ul><li><p>字体倾斜</p><blockquote><p>前后各加 <code>*倾斜*</code>或<code>_倾斜_</code>，例如：<em>倾斜</em></p></blockquote></li><li><p>字体加粗</p><blockquote><p>前后各加 <code>**加粗**</code>或<code>__加粗__</code>，例如：<strong>加粗</strong></p></blockquote></li><li><p>字体加粗倾斜</p><blockquote><p>前后各加 <code>***加粗倾斜***</code>或<code>___加粗倾斜___</code>，例如：<strong><em>加粗倾斜</em></strong></p></blockquote></li><li><p>删除线</p><blockquote><p>前后各加 <code>~~</code>，例如：<del>删除线</del></p></blockquote></li><li><p>字体高亮</p><blockquote><p>前后各加 <code>==</code>，例如：==高亮==<br>不明白为啥这里不能高亮显示，但其他地方可行，语法是对的。</p></blockquote></li></ul><h4 id="3-段落"><a href="#3-段落" class="headerlink" title="3.  段落"></a>3.  段落</h4><ul><li>段落：段落之间空出一行即可。</li><li>有序列表：<code>1.</code>后空一格即可，例如：</li></ul><ol><li>这里是有序列表</li><li>这里是有序列表哦</li></ol><ul><li>无序列表：使用<code>*</code>/<code>-</code>/<code>+</code>后空一格即可。例如：</li><li><p>换行符：一行结束后==空两格加回车==或直接回车<code>Enter</code>即可。例如：<br>这里是换行。  </p></li><li><p>首行缩进：<code>&amp;emsp</code>、<code>&amp;ensp</code>、<code>&amp;nbsp</code></p><blockquote><p>abcdefghijklmnopqrstuvwxyz（这里没有缩进）<br>&emsp;abcdefghijklmnopqrstuvwxyz<code>&amp;emsp</code><br>&ensp;abcdefghijklmnopqrstuvwxyz<code>&amp;ensp</code><br>&nbsp;abcdefghijklmnopqrstuvwxyz<code>&amp;nbsp</code></p></blockquote></li></ul><blockquote><p>ABCDEFGHIJKLMNOPQRSTUVWXYZ（这里没有缩进）<br>&emsp;ABCDEFGHIJKLMNOPQRSTUVWXYZ<code>&amp;emsp</code><br>&ensp;ABCDEFGHIJKLMNOPQRSTUVWXYZ<code>&amp;ensp</code><br>&nbsp;ABCDEFGHIJKLMNOPQRSTUVWXYZ<code>&amp;nbsp</code></p><p>首行缩进（这里没有缩进）<br>&emsp;首行缩进<code>&amp;emsp</code><br>&ensp;首行缩进<code>&amp;ensp</code><br>&nbsp;首行缩进<code>&amp;nbsp</code></p></blockquote><ul><li><p>内嵌行内代码：` alert(‘Hello World!’);`，例如：</p><blockquote><p><code>alert(&#39;Hello World!&#39;);</code></p></blockquote></li><li><p>内嵌指定语言代码块：``` Java/JavaScript/Python/C/C++… 换一行写代码，完成后以```结束。例如：<code>Python</code> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isprime</span><span class="params">(n)</span>:</span>  </span><br><span class="line">    k = int(sqrt(n))  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, k+<span class="number">1</span>):  </span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:  </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>  </span><br><span class="line">      </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:  </span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">101</span>, <span class="number">201</span>):  </span><br><span class="line">        <span class="keyword">if</span> isprime(n) == <span class="number">1</span>:  </span><br><span class="line">            print(n, end = <span class="string">' '</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-链接"><a href="#4-链接" class="headerlink" title="4.  链接"></a>4.  链接</h4><ul><li>行内式链接，<code>[链接文本](链接地址 &quot;Tips&quot;)</code>，例如：<a href="https://www.baidu.com" title="百度" target="_blank" rel="noopener">百度</a></li><li><code>&lt;url&gt;</code>：<a href="https://www.baidu.com" target="_blank" rel="noopener">https://www.baidu.com</a></li></ul><ul><li>图片链接：<code>! [链接文本](链接地址)</code>，例如：</li></ul><p><img src="https://image.wumaozheng.com/blog/home/background.jpeg" alt="Basketball"></p><h4 id="5-引用"><a href="#5-引用" class="headerlink" title="5. 引用"></a>5. 引用</h4><ul><li>一级引用：添加 <code>&gt;</code></li><li>二级引用：添加 <code>&gt;&gt;</code></li><li>三级引用：添加 <code>&gt;&gt;&gt;</code>，依此类推，例如：<blockquote><p>这里是一级引用，敲两下回车键 <code>Enter</code>，空出一行表示引用结束。</p><blockquote><p>这里是二级引用</p><blockquote><p>这里是三级引用</p><blockquote><p>这里是四级引用</p></blockquote></blockquote></blockquote></blockquote></li></ul><h4 id="6-表格"><a href="#6-表格" class="headerlink" title="6. 表格"></a>6. 表格</h4><ul><li>标题：|序号|班级|姓名|学号|</li><li>水平居左：<code>|:---|</code>或<code>|---|</code></li><li>水平居中：<code>|:---:|</code></li><li>水平居右：<code>|---:|</code></li><li>表格内容：|1|04|Mauger|66668888|，例如：</li></ul><blockquote><table><thead><tr><th>序号</th><th style="text-align:left">班级</th><th style="text-align:center">姓名</th><th style="text-align:right">学号</th></tr></thead><tbody><tr><td>1</td><td style="text-align:left">04</td><td style="text-align:center">Mauger</td><td style="text-align:right">66668888</td></tr></tbody></table></blockquote><h4 id="7-分割线"><a href="#7-分割线" class="headerlink" title="7. 分割线"></a>7. 分割线</h4><ul><li>新启一行，输入<code>---</code>或<code>___</code>或<code>***</code>或<code>* * *</code>即可。</li></ul><h4 id="8-多选框"><a href="#8-多选框" class="headerlink" title="8. 多选框"></a>8. 多选框</h4><blockquote><p><code>- [ ]</code> 与 <code>- [x]</code></p></blockquote><ul><li style="list-style: none"><input type="checkbox"> 没有勾选</li><li style="list-style: none"><input type="checkbox" checked> 这个勾选了</li></ul><h3 id="Markdown-常用编辑器"><a href="#Markdown-常用编辑器" class="headerlink" title="Markdown 常用编辑器"></a>Markdown 常用编辑器</h3><h4 id="1-Markdown在线编辑器"><a href="#1-Markdown在线编辑器" class="headerlink" title="1.  Markdown在线编辑器"></a>1.  Markdown在线编辑器</h4><ul><li><a href="https://maxiang.io/" target="_blank" rel="noopener">马克飞象 </a>： 一款专为印象笔记（Evernote）打造的 Markdown 编辑器。</li><li><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">作业部落</a>：博客平台，支持全平台且提供 Web 版。</li><li><a href="http://soft.xiaoshujiang.com" target="_blank" rel="noopener">小书匠</a>：提供免费/收费版本，功能强大，支持全平台且提供 Web 版。</li><li><a href="http://mahua.jser.me/" target="_blank" rel="noopener">MaHua</a>： 界面有些简陋，Windows 10下自带输入法无法输入中文。</li><li><a href="https://dillinger.io" target="_blank" rel="noopener">Dillinger</a> ：漂亮强大，国外的，可能不稳定。</li><li><a href="https://www.jianshu.com" target="_blank" rel="noopener">简书</a>： 博客平台，暂不支持文本高亮显示。</li></ul><h4 id="2-支持多平台"><a href="#2-支持多平台" class="headerlink" title="2. 支持多平台"></a>2. 支持多平台</h4><ul><li><a href="http://www.sublimetext.com" target="_blank" rel="noopener">Sublime Text</a>：提供免/收费版本，支持 Mac、Windows。界面简约大方，定位专业。</li><li><a href="https://www.farbox.com" target="_blank" rel="noopener">Farbox</a>：博客平台，于2016年“终结”，仍运行但不再更新。将被 Bitcon 替代。</li><li><a href="https://zrey.com/app/markeditor" target="_blank" rel="noopener">MarkEditor</a>：提供免费/收费版本，支持 Mac 和 Windows。</li><li><a href="http://atom.io" target="_blank" rel="noopener">Atom</a>：出自 Github，功能十分强大，支持多种编程语言，全平台，程序员专用。</li></ul><h4 id="3-Windows平台"><a href="#3-Windows平台" class="headerlink" title="3. Windows平台"></a>3. Windows平台</h4><ul><li><a href="http://www.markdownpad.com/" target="_blank" rel="noopener">MarkdownPad</a>：提供免费/收费版本，好用。</li><li><a href="http://git.oschina.net/elerao/Smark" target="_blank" rel="noopener">Smark</a>：开源，简洁，支持 Windows 和 Linux 平台。</li><li><a href="http://www.mdcharm.com" target="_blank" rel="noopener">MdCharm</a>：开源，简约，功能完备，支持 Windows 和 Linux 平台。</li></ul><h4 id="4-OS-X平台"><a href="#4-OS-X平台" class="headerlink" title="4. OS X平台"></a>4. OS X平台</h4><ul><li><a href="http://25.io/mou/" target="_blank" rel="noopener">Mou</a>：开发者的 Markdown 编辑器，支持 OS X 10.7~10.11，计划将支持 Sierra。</li><li><a href="http://typora.io/" target="_blank" rel="noopener">Typora</a>：同时支持 Windows 和 Linux 平台。</li><li><a href="http://macdown.uranusjr.com/" target="_blank" rel="noopener">MacDown</a>：开源，免费。</li></ul><h3 id="Markdown-数学符号和公式"><a href="#Markdown-数学符号和公式" class="headerlink" title="Markdown 数学符号和公式"></a>Markdown 数学符号和公式</h3><ul><li><a href="https://blog.csdn.net/katherine_hsr/article/details/79179622" target="_blank" rel="noopener">Markdown 数学符号&amp;公式</a></li></ul><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="http://www.williamlong.info/archives/4319.html" target="_blank" rel="noopener">月光博客</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://image.wumaozheng.com/blog/article/Markdown.jpg&quot; alt=&quot;Markdown&amp;amp;Tools&quot; title=&quot;Markdown&amp;amp;Tools&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Markdown-简介&quot;&gt;&lt;a href=&quot;#Markdown-简介&quot; class=&quot;headerlink&quot; title=&quot;Markdown 简介&quot;&gt;&lt;/a&gt;Markdown 简介&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档。特点：&lt;code&gt;轻量、简单、通用、易读易写&lt;/code&gt;。感觉在 &lt;a href=&quot;https://www.jianshu.com/p/6601be24bdd6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书&lt;/a&gt; 中展示要好得多！
    
    </summary>
    
    
      <category term="Markdown" scheme="https://wumaozheng.com/tags/Markdown/"/>
    
      <category term="Editor" scheme="https://wumaozheng.com/tags/Editor/"/>
    
      <category term="Tools" scheme="https://wumaozheng.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>使用Git命令提交代码</title>
    <link href="https://wumaozheng.com/2017/git-in-linux.html"/>
    <id>https://wumaozheng.com/2017/git-in-linux.html</id>
    <published>2017-12-26T04:07:00.000Z</published>
    <updated>2018-09-18T13:12:34.235Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.wumaozheng.com/blog/article/Git.jpg" alt="Linux" title="Linux"></p><h3 id="使用Git提交代码的五个步骤"><a href="#使用Git提交代码的五个步骤" class="headerlink" title="使用Git提交代码的五个步骤"></a>使用Git提交代码的五个步骤</h3><ol><li>查看代码的修改状态</li><li>查看代码的修改内容</li><li>暂存需要提交的代码</li><li>提交已经暂存的文件</li><li>将代码同步到服务器</li></ol><a id="more"></a><h3 id="使用Git操作命令"><a href="#使用Git操作命令" class="headerlink" title="使用Git操作命令"></a>使用Git操作命令</h3><p><strong>Step1.</strong> 查看代码修改状态 </p><blockquote><p><code>git status</code>  </p></blockquote><ul><li>红色或绿色部分字体是工程内的发生修改的状态标识:</li><li>modified 代表文件和上一版本相比，有过修改</li><li>new  file  代表文件是新增加的</li><li>deleted   代表文件被删除了，提交成功后，文件将从repository中删除</li><li>untracked file 一般都是新增加的文件夹  </li></ul><p><strong>Step2.</strong> 查看代码的修改内容</p><ul><li><p>这里是查看 <code>.gitignore</code> 文件的变化</p><blockquote><p><code>git diff &lt;filename&gt;</code></p></blockquote></li><li><p>这里是查看历史修改，<code>hashcode</code>可以从<code>Github</code>上的<code>commit</code>记录上获取</p><blockquote><p><code>git diff &lt;hashcode&gt; &lt;hashcode&gt; &lt;filename&gt;</code></p></blockquote></li></ul><p><strong>Step3.</strong> 暂存需要提交的代码</p><ul><li><p>增加一个需要上传的文件</p><blockquote><p><code>git add &lt;filename&gt;</code></p></blockquote></li><li><p>增加所有需要上传的文件</p><blockquote><p><code>git add --all</code></p></blockquote></li><li><p>删除一个不需要上传的文件</p><blockquote><p><code>git rm &lt;filename&gt;</code></p></blockquote></li></ul><p><strong>Step4.</strong> 提交已暂存的文件（仅仅是将修改提交到本地仓库）</p><ul><li><p>提交已暂存的文件</p><blockquote><p><code>git commit</code> </p></blockquote></li><li><p>若发现漏提文件或注释有误，使用 <code>amend</code> 修正</p><blockquote><p><code>git commit --amend</code></p></blockquote></li><li><p>提交已暂存的文件，同时进行注释</p><blockquote><p><code>git commit -m &lt;comment&gt;</code></p></blockquote></li></ul><p><strong>Step5.</strong> 推送/同步到远端服务器</p><blockquote><p><code>git push -u origin master</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://image.wumaozheng.com/blog/article/Git.jpg&quot; alt=&quot;Linux&quot; title=&quot;Linux&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用Git提交代码的五个步骤&quot;&gt;&lt;a href=&quot;#使用Git提交代码的五个步骤&quot; class=&quot;headerlink&quot; title=&quot;使用Git提交代码的五个步骤&quot;&gt;&lt;/a&gt;使用Git提交代码的五个步骤&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;查看代码的修改状态&lt;/li&gt;
&lt;li&gt;查看代码的修改内容&lt;/li&gt;
&lt;li&gt;暂存需要提交的代码&lt;/li&gt;
&lt;li&gt;提交已经暂存的文件&lt;/li&gt;
&lt;li&gt;将代码同步到服务器&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://wumaozheng.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://wumaozheng.com/2017/hello-world.html"/>
    <id>https://wumaozheng.com/2017/hello-world.html</id>
    <published>2017-12-24T03:38:05.000Z</published>
    <updated>2018-09-18T13:13:02.622Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.wumaozheng.com/blog/article/Hexo.png" alt="Github&amp;Hexo"></p><p>&emsp;&emsp;Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/MaugerWu" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://image.wumaozheng.com/blog/article/Hexo.png&quot; alt=&quot;Github&amp;amp;Hexo&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/MaugerWu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://wumaozheng.com/tags/Hexo/"/>
    
      <category term="Blog" scheme="https://wumaozheng.com/tags/Blog/"/>
    
      <category term="Github" scheme="https://wumaozheng.com/tags/Github/"/>
    
  </entry>
  
</feed>
